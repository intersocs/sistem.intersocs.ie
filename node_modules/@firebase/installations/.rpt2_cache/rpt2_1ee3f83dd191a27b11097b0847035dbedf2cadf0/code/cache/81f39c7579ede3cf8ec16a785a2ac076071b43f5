{"code":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\r\nexport var VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\r\nexport var INVALID_FID = '';\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nexport function generateFid() {\r\n    try {\r\n        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\r\n        // bytes. our implementation generates a 17 byte array instead.\r\n        var fidByteArray = new Uint8Array(17);\r\n        var crypto_1 = self.crypto || self.msCrypto;\r\n        crypto_1.getRandomValues(fidByteArray);\r\n        // Replace the first 4 random bits with the constant FID header of 0b0111.\r\n        fidByteArray[0] = 112 + (fidByteArray[0] % 16);\r\n        var fid = encode(fidByteArray);\r\n        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\r\n    }\r\n    catch (_a) {\r\n        // FID generation errored\r\n        return INVALID_FID;\r\n    }\r\n}\r\n/** Converts a FID Uint8Array to a base64 string representation. */\r\nfunction encode(fidByteArray) {\r\n    var b64String = bufferToBase64UrlSafe(fidByteArray);\r\n    // Remove the 23rd character that was added because of the extra 4 bits at the\r\n    // end of our 17 byte array, and the '=' padding.\r\n    return b64String.substr(0, 22);\r\n}\r\n//# sourceMappingURL=generate-fid.js.map","references":["/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/buffer-to-base64-url-safe.ts"],"map":"{\"version\":3,\"file\":\"generate-fid.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/helpers/generate-fid.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;AAEH,OAAO,EAAE,qBAAqB,EAAE,MAAM,6BAA6B,CAAC;AAEpE,MAAM,CAAC,IAAM,iBAAiB,GAAG,mBAAmB,CAAC;AACrD,MAAM,CAAC,IAAM,WAAW,GAAG,EAAE,CAAC;AAE9B;;;GAGG;AACH,MAAM,UAAU,WAAW;IACzB,IAAI;QACF,2EAA2E;QAC3E,+DAA+D;QAC/D,IAAM,YAAY,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;QACxC,IAAM,QAAM,GACV,IAAI,CAAC,MAAM,IAAM,IAAyC,CAAC,QAAQ,CAAC;QACtE,QAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAErC,0EAA0E;QAC1E,YAAY,CAAC,CAAC,CAAC,GAAG,GAAU,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,EAAU,CAAC,CAAC;QAE9D,IAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;QAEjC,OAAO,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC;KACxD;IAAC,WAAM;QACN,yBAAyB;QACzB,OAAO,WAAW,CAAC;KACpB;AACH,CAAC;AAED,mEAAmE;AACnE,SAAS,MAAM,CAAC,YAAwB;IACtC,IAAM,SAAS,GAAG,qBAAqB,CAAC,YAAY,CAAC,CAAC;IAEtD,8EAA8E;IAC9E,iDAAiD;IACjD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AACjC,CAAC\"}","dts":{"name":"/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/generate-fid.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport declare const VALID_FID_PATTERN: RegExp;\r\nexport declare const INVALID_FID = \"\";\r\n/**\r\n * Generates a new FID using random values from Web Crypto API.\r\n * Returns an empty string if FID generation fails for any reason.\r\n */\r\nexport declare function generateFid(): string;\r\n"}}

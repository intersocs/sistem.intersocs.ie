{"code":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { generateAuthToken } from '../api/generate-auth-token';\r\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\r\nimport { ERROR_FACTORY, isServerError } from '../util/errors';\r\nimport { sleep } from '../util/sleep';\r\nimport { remove, set, update } from './idb-manager';\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nexport function refreshAuthToken(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var tokenPromise, entry, authToken, _a;\r\n        return tslib_1.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                        if (!isEntryRegistered(oldEntry)) {\r\n                            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n                        }\r\n                        var oldAuthToken = oldEntry.authToken;\r\n                        if (isAuthTokenValid(oldAuthToken)) {\r\n                            // There is a valid token in the DB.\r\n                            return oldEntry;\r\n                        }\r\n                        else if (oldAuthToken.requestStatus === 1 /* IN_PROGRESS */) {\r\n                            // There already is a token request in progress.\r\n                            tokenPromise = waitUntilAuthTokenRequest(appConfig);\r\n                            return oldEntry;\r\n                        }\r\n                        else {\r\n                            // No token or token expired.\r\n                            if (!navigator.onLine) {\r\n                                throw ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */);\r\n                            }\r\n                            var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\r\n                            tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\r\n                            return inProgressEntry;\r\n                        }\r\n                    })];\r\n                case 1:\r\n                    entry = _b.sent();\r\n                    if (!tokenPromise) return [3 /*break*/, 3];\r\n                    return [4 /*yield*/, tokenPromise];\r\n                case 2:\r\n                    _a = _b.sent();\r\n                    return [3 /*break*/, 4];\r\n                case 3:\r\n                    _a = entry.authToken;\r\n                    _b.label = 4;\r\n                case 4:\r\n                    authToken = _a;\r\n                    return [2 /*return*/, authToken.token];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Call only if FID is registered and Auth Token request is in progress.\r\n */\r\nfunction waitUntilAuthTokenRequest(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var entry, authToken;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                case 1:\r\n                    entry = _a.sent();\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!(entry.authToken.requestStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                    // generateAuthToken still in progress.\r\n                    return [4 /*yield*/, sleep(100)];\r\n                case 3:\r\n                    // generateAuthToken still in progress.\r\n                    _a.sent();\r\n                    return [4 /*yield*/, updateAuthTokenRequest(appConfig)];\r\n                case 4:\r\n                    entry = _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 5:\r\n                    authToken = entry.authToken;\r\n                    if (authToken.requestStatus === 0 /* NOT_STARTED */) {\r\n                        throw ERROR_FACTORY.create(\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */);\r\n                    }\r\n                    else {\r\n                        return [2 /*return*/, authToken];\r\n                    }\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Called only if there is a GenerateAuthToken request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * GenerateAuthToken request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateAuthTokenRequest(appConfig) {\r\n    return update(appConfig, function (oldEntry) {\r\n        if (!isEntryRegistered(oldEntry)) {\r\n            throw ERROR_FACTORY.create(\"not-registered\" /* NOT_REGISTERED */);\r\n        }\r\n        var oldAuthToken = oldEntry.authToken;\r\n        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\r\n            return tslib_1.__assign({}, oldEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nfunction fetchAuthTokenFromServer(appConfig, installationEntry) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 3, , 8]);\r\n                    return [4 /*yield*/, generateAuthToken(appConfig, installationEntry)];\r\n                case 1:\r\n                    authToken = _a.sent();\r\n                    updatedInstallationEntry = tslib_1.__assign({}, installationEntry, { authToken: authToken });\r\n                    return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                case 2:\r\n                    _a.sent();\r\n                    return [2 /*return*/, authToken];\r\n                case 3:\r\n                    e_1 = _a.sent();\r\n                    if (!(isServerError(e_1) && (e_1.serverCode === 401 || e_1.serverCode === 404))) return [3 /*break*/, 5];\r\n                    // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                    // Generate a new ID next time.\r\n                    return [4 /*yield*/, remove(appConfig)];\r\n                case 4:\r\n                    // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\r\n                    // Generate a new ID next time.\r\n                    _a.sent();\r\n                    return [3 /*break*/, 7];\r\n                case 5:\r\n                    updatedInstallationEntry = tslib_1.__assign({}, installationEntry, { authToken: { requestStatus: 0 /* NOT_STARTED */ } });\r\n                    return [4 /*yield*/, set(appConfig, updatedInstallationEntry)];\r\n                case 6:\r\n                    _a.sent();\r\n                    _a.label = 7;\r\n                case 7: throw e_1;\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction isEntryRegistered(installationEntry) {\r\n    return (installationEntry !== undefined &&\r\n        installationEntry.registrationStatus === 2 /* COMPLETED */);\r\n}\r\nfunction isAuthTokenValid(authToken) {\r\n    return (authToken.requestStatus === 2 /* COMPLETED */ &&\r\n        !isAuthTokenExpired(authToken));\r\n}\r\nfunction isAuthTokenExpired(authToken) {\r\n    var now = Date.now();\r\n    return (now < authToken.creationTime ||\r\n        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);\r\n}\r\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\r\nfunction makeAuthTokenRequestInProgressEntry(oldEntry) {\r\n    var inProgressAuthToken = {\r\n        requestStatus: 1 /* IN_PROGRESS */,\r\n        requestTime: Date.now()\r\n    };\r\n    return tslib_1.__assign({}, oldEntry, { authToken: inProgressAuthToken });\r\n}\r\nfunction hasAuthTokenRequestTimedOut(authToken) {\r\n    return (authToken.requestStatus === 1 /* IN_PROGRESS */ &&\r\n        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\r\n//# sourceMappingURL=refresh-auth-token.js.map","references":["/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/api/generate-auth-token.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/interfaces/app-config.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/interfaces/installation-entry.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/constants.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/errors.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/sleep.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/idb-manager.ts"],"map":"{\"version\":3,\"file\":\"refresh-auth-token.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/helpers/refresh-auth-token.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/refresh-auth-token.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AppConfig } from '../interfaces/app-config';\r\n/**\r\n * Returns a valid authentication token for the installation. Generates a new\r\n * token if one doesn't exist, is expired or about to expire.\r\n *\r\n * Should only be called if the Firebase Installation is registered.\r\n */\r\nexport declare function refreshAuthToken(appConfig: AppConfig): Promise<string>;\r\n"}}

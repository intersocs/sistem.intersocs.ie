{"code":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { createInstallation } from '../api/create-installation';\r\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\r\nimport { ERROR_FACTORY, isServerError } from '../util/errors';\r\nimport { sleep } from '../util/sleep';\r\nimport { generateFid, INVALID_FID } from './generate-fid';\r\nimport { remove, set, update } from './idb-manager';\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nexport function getInstallationEntry(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var registrationPromise, installationEntry, _a;\r\n        return tslib_1.__generator(this, function (_b) {\r\n            switch (_b.label) {\r\n                case 0: return [4 /*yield*/, update(appConfig, function (oldEntry) {\r\n                        var installationEntry = updateOrCreateInstallationEntry(oldEntry);\r\n                        var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry);\r\n                        registrationPromise = entryWithPromise.registrationPromise;\r\n                        return entryWithPromise.installationEntry;\r\n                    })];\r\n                case 1:\r\n                    installationEntry = _b.sent();\r\n                    if (!(installationEntry.fid === INVALID_FID)) return [3 /*break*/, 3];\r\n                    _a = {};\r\n                    return [4 /*yield*/, registrationPromise];\r\n                case 2: \r\n                // FID generation failed. Waiting for the FID from the server.\r\n                return [2 /*return*/, (_a.installationEntry = _b.sent(), _a)];\r\n                case 3: return [2 /*return*/, {\r\n                        installationEntry: installationEntry,\r\n                        registrationPromise: registrationPromise\r\n                    }];\r\n            }\r\n        });\r\n    });\r\n}\r\nfunction updateOrCreateInstallationEntry(oldEntry) {\r\n    var entry = oldEntry || {\r\n        fid: generateFid(),\r\n        registrationStatus: 0 /* NOT_STARTED */\r\n    };\r\n    if (hasInstallationRequestTimedOut(entry)) {\r\n        return {\r\n            fid: entry.fid,\r\n            registrationStatus: 0 /* NOT_STARTED */\r\n        };\r\n    }\r\n    return entry;\r\n}\r\n/**\r\n * If the Firebase Installation is not registered yet, this will trigger the registration\r\n * and return an InProgressInstallationEntry.\r\n */\r\nfunction triggerRegistrationIfNecessary(appConfig, installationEntry) {\r\n    if (installationEntry.registrationStatus === 0 /* NOT_STARTED */) {\r\n        if (!navigator.onLine) {\r\n            // Registration required but app is offline.\r\n            var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create(\"app-offline\" /* APP_OFFLINE */));\r\n            return {\r\n                installationEntry: installationEntry,\r\n                registrationPromise: registrationPromiseWithError\r\n            };\r\n        }\r\n        // Try registering. Change status to IN_PROGRESS.\r\n        var inProgressEntry = {\r\n            fid: installationEntry.fid,\r\n            registrationStatus: 1 /* IN_PROGRESS */,\r\n            registrationTime: Date.now()\r\n        };\r\n        var registrationPromise = registerInstallation(appConfig, inProgressEntry);\r\n        return { installationEntry: inProgressEntry, registrationPromise: registrationPromise };\r\n    }\r\n    else if (installationEntry.registrationStatus === 1 /* IN_PROGRESS */) {\r\n        return {\r\n            installationEntry: installationEntry,\r\n            registrationPromise: waitUntilFidRegistration(appConfig)\r\n        };\r\n    }\r\n    else {\r\n        return { installationEntry: installationEntry };\r\n    }\r\n}\r\n/** This will be executed only once for each new Firebase Installation. */\r\nfunction registerInstallation(appConfig, installationEntry) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var registeredInstallationEntry, e_1;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    _a.trys.push([0, 2, , 7]);\r\n                    return [4 /*yield*/, createInstallation(appConfig, installationEntry)];\r\n                case 1:\r\n                    registeredInstallationEntry = _a.sent();\r\n                    return [2 /*return*/, set(appConfig, registeredInstallationEntry)];\r\n                case 2:\r\n                    e_1 = _a.sent();\r\n                    if (!(isServerError(e_1) && e_1.serverCode === 409)) return [3 /*break*/, 4];\r\n                    // Server returned a \"FID can not be used\" error.\r\n                    // Generate a new ID next time.\r\n                    return [4 /*yield*/, remove(appConfig)];\r\n                case 3:\r\n                    // Server returned a \"FID can not be used\" error.\r\n                    // Generate a new ID next time.\r\n                    _a.sent();\r\n                    return [3 /*break*/, 6];\r\n                case 4: \r\n                // Registration failed. Set FID as not registered.\r\n                return [4 /*yield*/, set(appConfig, {\r\n                        fid: installationEntry.fid,\r\n                        registrationStatus: 0 /* NOT_STARTED */\r\n                    })];\r\n                case 5:\r\n                    // Registration failed. Set FID as not registered.\r\n                    _a.sent();\r\n                    _a.label = 6;\r\n                case 6: throw e_1;\r\n                case 7: return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\n/** Call if FID registration is pending. */\r\nfunction waitUntilFidRegistration(appConfig) {\r\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n        var entry;\r\n        return tslib_1.__generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0: return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                case 1:\r\n                    entry = _a.sent();\r\n                    _a.label = 2;\r\n                case 2:\r\n                    if (!(entry.registrationStatus === 1 /* IN_PROGRESS */)) return [3 /*break*/, 5];\r\n                    // createInstallation request still in progress.\r\n                    return [4 /*yield*/, sleep(100)];\r\n                case 3:\r\n                    // createInstallation request still in progress.\r\n                    _a.sent();\r\n                    return [4 /*yield*/, updateInstallationRequest(appConfig)];\r\n                case 4:\r\n                    entry = _a.sent();\r\n                    return [3 /*break*/, 2];\r\n                case 5:\r\n                    if (entry.registrationStatus === 0 /* NOT_STARTED */) {\r\n                        throw ERROR_FACTORY.create(\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */);\r\n                    }\r\n                    return [2 /*return*/, entry];\r\n            }\r\n        });\r\n    });\r\n}\r\n/**\r\n * Called only if there is a CreateInstallation request in progress.\r\n *\r\n * Updates the InstallationEntry in the DB based on the status of the\r\n * CreateInstallation request.\r\n *\r\n * Returns the updated InstallationEntry.\r\n */\r\nfunction updateInstallationRequest(appConfig) {\r\n    return update(appConfig, function (oldEntry) {\r\n        if (!oldEntry) {\r\n            throw ERROR_FACTORY.create(\"installation-not-found\" /* INSTALLATION_NOT_FOUND */);\r\n        }\r\n        if (hasInstallationRequestTimedOut(oldEntry)) {\r\n            return {\r\n                fid: oldEntry.fid,\r\n                registrationStatus: 0 /* NOT_STARTED */\r\n            };\r\n        }\r\n        return oldEntry;\r\n    });\r\n}\r\nfunction hasInstallationRequestTimedOut(installationEntry) {\r\n    return (installationEntry.registrationStatus === 1 /* IN_PROGRESS */ &&\r\n        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());\r\n}\r\n//# sourceMappingURL=get-installation-entry.js.map","references":["/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/api/create-installation.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/interfaces/app-config.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/interfaces/installation-entry.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/constants.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/errors.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/sleep.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/generate-fid.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/idb-manager.ts"],"map":"{\"version\":3,\"file\":\"get-installation-entry.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/helpers/get-installation-entry.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/helpers/get-installation-entry.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { AppConfig } from '../interfaces/app-config';\r\nimport { InstallationEntry, RegisteredInstallationEntry } from '../interfaces/installation-entry';\r\nexport interface InstallationEntryWithRegistrationPromise {\r\n    installationEntry: InstallationEntry;\r\n    registrationPromise?: Promise<RegisteredInstallationEntry>;\r\n}\r\n/**\r\n * Updates and returns the InstallationEntry from the database.\r\n * Also triggers a registration request if it is necessary and possible.\r\n */\r\nexport declare function getInstallationEntry(appConfig: AppConfig): Promise<InstallationEntryWithRegistrationPromise>;\r\n"}}

{"code":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar _a;\r\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\r\nimport { SERVICE, SERVICE_NAME } from './constants';\r\nvar ERROR_DESCRIPTION_MAP = (_a = {},\r\n    _a[\"missing-app-config-values\" /* MISSING_APP_CONFIG_VALUES */] = 'Missing App configuration values.',\r\n    _a[\"create-installation-failed\" /* CREATE_INSTALLATION_FAILED */] = 'Could not register Firebase Installation.',\r\n    _a[\"generate-token-failed\" /* GENERATE_TOKEN_FAILED */] = 'Could not generate Auth Token.',\r\n    _a[\"not-registered\" /* NOT_REGISTERED */] = 'Firebase Installation is not registered.',\r\n    _a[\"installation-not-found\" /* INSTALLATION_NOT_FOUND */] = 'Firebase Installation not found.',\r\n    _a[\"request-failed\" /* REQUEST_FAILED */] = '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\r\n    _a[\"app-offline\" /* APP_OFFLINE */] = 'Could not process request. Application offline.',\r\n    _a[\"delete-pending-registration\" /* DELETE_PENDING_REGISTRATION */] = \"Can't delete installation while there is a pending registration request.\",\r\n    _a);\r\nexport var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nexport function isServerError(error) {\r\n    return (error instanceof FirebaseError &&\r\n        error.code.includes(\"request-failed\" /* REQUEST_FAILED */));\r\n}\r\n//# sourceMappingURL=errors.js.map","references":["/tmp/firebase-TMP/firebase-js-sdk/packages/util/dist/index.d.ts","/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/constants.ts"],"map":"{\"version\":3,\"file\":\"errors.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/util/errors.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;GAeG;;AAEH,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC7D,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAapD,IAAM,qBAAqB;IACzB,kEAAuC,mCAAmC;IAC1E,oEACE,2CAA2C;IAC7C,0DAAmC,gCAAgC;IACnE,4CAA4B,0CAA0C;IACtE,4DAAoC,kCAAkC;IACtE,4CACE,4FAA4F;IAC9F,sCAAyB,iDAAiD;IAC1E,sEACE,0EAA0E;OAC7E,CAAC;AAQF,MAAM,CAAC,IAAM,aAAa,GAAG,IAAI,YAAY,CAC3C,OAAO,EACP,YAAY,EACZ,qBAAqB,CACtB,CAAC;AAUF,0FAA0F;AAC1F,MAAM,UAAU,aAAa,CAAC,KAAc;IAC1C,OAAO,CACL,KAAK,YAAY,aAAa;QAC9B,KAAK,CAAC,IAAI,CAAC,QAAQ,uCAA0B,CAC9C,CAAC;AACJ,CAAC\"}","dts":{"name":"/tmp/firebase-TMP/firebase-js-sdk/packages/installations/src/util/errors.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @license\r\n * Copyright 2019 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\r\nexport declare const enum ErrorCode {\r\n    MISSING_APP_CONFIG_VALUES = \"missing-app-config-values\",\r\n    CREATE_INSTALLATION_FAILED = \"create-installation-failed\",\r\n    GENERATE_TOKEN_FAILED = \"generate-token-failed\",\r\n    NOT_REGISTERED = \"not-registered\",\r\n    INSTALLATION_NOT_FOUND = \"installation-not-found\",\r\n    REQUEST_FAILED = \"request-failed\",\r\n    APP_OFFLINE = \"app-offline\",\r\n    DELETE_PENDING_REGISTRATION = \"delete-pending-registration\"\r\n}\r\ninterface ErrorParams {\r\n    [ErrorCode.REQUEST_FAILED]: {\r\n        requestName: string;\r\n    } & ServerErrorData;\r\n}\r\nexport declare const ERROR_FACTORY: ErrorFactory<ErrorCode, ErrorParams>;\r\nexport interface ServerErrorData {\r\n    serverCode: number;\r\n    serverMessage: string;\r\n    serverStatus: string;\r\n}\r\nexport declare type ServerError = FirebaseError & ServerErrorData;\r\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\r\nexport declare function isServerError(error: unknown): error is ServerError;\r\nexport {};\r\n"}}

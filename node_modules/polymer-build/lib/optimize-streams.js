"use strict";
/**
 * @license
 * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
Object.defineProperty(exports, "__esModule", { value: true });
const cssSlam = require("css-slam");
const gulpif = require("gulp-if");
const html_minifier_1 = require("html-minifier");
const logging = require("plylog");
const stream_1 = require("stream");
const matcher = require("matcher");
const js_transform_1 = require("./js-transform");
const logger = logging.getLogger('cli.build.optimize-streams');
/**
 * GenericOptimizeTransform is a generic optimization stream. It can be extended
 * to create a new kind of specific file-type optimizer, or it can be used
 * directly to create an ad-hoc optimization stream for different libraries.
 * If the transform library throws an exception when run, the file will pass
 * through unaffected.
 */
class GenericOptimizeTransform extends stream_1.Transform {
    constructor(optimizerName, optimizer) {
        super({ objectMode: true });
        this.optimizer = optimizer;
        this.optimizerName = optimizerName;
    }
    _transform(file, _encoding, callback) {
        // TODO(fks) 03-07-2017: This is a quick fix to make sure that
        // "webcomponentsjs" files aren't compiled down to ES5, because they contain
        // an important ES6 shim to make custom elements possible. Remove/refactor
        // when we have a better plan for excluding some files from optimization.
        if (!file.path || file.path.indexOf('webcomponentsjs/') >= 0 ||
            file.path.indexOf('webcomponentsjs\\') >= 0) {
            callback(null, file);
            return;
        }
        if (file.contents) {
            try {
                let contents = file.contents.toString();
                contents = this.optimizer(contents, file);
                file.contents = new Buffer(contents);
            }
            catch (error) {
                logger.warn(`${this.optimizerName}: Unable to optimize ${file.path}`, { err: error.message || error });
            }
        }
        callback(null, file);
    }
}
exports.GenericOptimizeTransform = GenericOptimizeTransform;
/**
 * Transform JavaScript using Babel.
 */
class JsTransform extends GenericOptimizeTransform {
    constructor(options) {
        const shouldCompileFile = options.compile ? notExcluded(options.compile) : () => false;
        const shouldMinifyFile = options.minify ? notExcluded(options.minify) : () => false;
        const transformer = (content, file) => js_transform_1.jsTransform(content, {
            compileToEs5: shouldCompileFile(file),
            minify: shouldMinifyFile(file),
            moduleResolution: options.moduleResolution,
            filePath: file.path,
            transformEsModulesToAmd: options.transformEsModulesToAmd,
        });
        super('babel-compile', transformer);
    }
}
exports.JsTransform = JsTransform;
/**
 * CSSMinifyTransform minifies CSS that pass through it (via css-slam).
 */
class CSSMinifyTransform extends GenericOptimizeTransform {
    constructor(options) {
        super('css-slam-minify', cssSlam.css);
        this.options = options;
    }
    _transform(file, encoding, callback) {
        // css-slam will only be run if the `stripWhitespace` option is true.
        if (this.options.stripWhitespace) {
            super._transform(file, encoding, callback);
        }
    }
}
exports.CSSMinifyTransform = CSSMinifyTransform;
/**
 * InlineCSSOptimizeTransform minifies inlined CSS (found in HTML files) that
 * passes through it (via css-slam).
 */
class InlineCSSOptimizeTransform extends GenericOptimizeTransform {
    constructor(options) {
        super('css-slam-inline', cssSlam.html);
        this.options = options;
    }
    _transform(file, encoding, callback) {
        // css-slam will only be run if the `stripWhitespace` option is true.
        if (this.options.stripWhitespace) {
            super._transform(file, encoding, callback);
        }
    }
}
exports.InlineCSSOptimizeTransform = InlineCSSOptimizeTransform;
/**
 * HTMLOptimizeTransform minifies HTML files that pass through it
 * (via html-minifier).
 */
class HTMLOptimizeTransform extends GenericOptimizeTransform {
    constructor(options) {
        super('html-minify', (source) => html_minifier_1.minify(source, options));
    }
}
exports.HTMLOptimizeTransform = HTMLOptimizeTransform;
/**
 * Returns an array of optimization streams to use in your build, based on the
 * OptimizeOptions given.
 */
function getOptimizeStreams(options) {
    options = options || {};
    const streams = [];
    // compile and/or minify ES6 JavaScript using babel
    if (options.js &&
        (options.js.compile || options.js.minify ||
            options.js.moduleResolution === 'node')) {
        streams.push(gulpif(matchesExt('.js'), new JsTransform(options.js)));
    }
    // minify code (minify should always be the last transform)
    if (options.html && options.html.minify) {
        streams.push(gulpif(matchesExtAndNotExcluded('.html', options.html.minify), new HTMLOptimizeTransform({ collapseWhitespace: true, removeComments: true })));
    }
    if (options.css && options.css.minify) {
        streams.push(gulpif(matchesExtAndNotExcluded('.css', options.css.minify), new CSSMinifyTransform({ stripWhitespace: true })));
        // TODO(fks): Remove this InlineCSSOptimizeTransform stream once CSS
        // is properly being isolated by splitHtml() & rejoinHtml().
        streams.push(gulpif(matchesExtAndNotExcluded('.html', options.css.minify), new InlineCSSOptimizeTransform({ stripWhitespace: true })));
    }
    return streams;
}
exports.getOptimizeStreams = getOptimizeStreams;
function matchesExt(extension) {
    return (fs) => !!fs.path && fs.relative.endsWith(extension);
}
function notExcluded(option) {
    const exclude = typeof option === 'object' && option.exclude || [];
    return (fs) => !exclude.some((pattern) => matcher.isMatch(fs.relative, pattern));
}
function matchesExtAndNotExcluded(extension, option) {
    const a = matchesExt(extension);
    const b = notExcluded(option);
    return (fs) => a(fs) && b(fs);
}

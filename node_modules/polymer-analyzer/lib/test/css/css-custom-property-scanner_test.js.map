{"version":3,"sources":["test/css/css-custom-property-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAC5B,6BAA6B;AAE7B,kDAA6C;AAC7C,kEAA2D;AAE3D,8CAA6C;AAE7C,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAErD,KAAK,CAAC,0BAA0B,EAAE,GAAG,EAAE;IACrC,IAAI,QAAkB,CAAC;IACvB,IAAI,UAA0B,CAAC;IAE/B,KAAK,CAAC,GAAG,EAAE;QACT,MAAM,SAAS,GAAG,IAAI,2BAAW,CAAC,OAAO,CAAC,CAAC;QAC3C,QAAQ,GAAG,IAAI,mBAAQ,CAAC,EAAC,SAAS,EAAC,CAAC,CAAC;QACrC,UAAU,GAAG,IAAI,2BAAc,CAAC,SAAS,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,mCAAmC,EAAE,GAAQ,EAAE;QAClD,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC5D,MAAM,WAAW,GACb,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,gCAAgC,EAAC,CAAC,CAAC,CAAC;QACtE,aAAM,CAAC,SAAS,CACZ,MAAM,OAAO,CAAC,GAAG,CACb,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAChE;YACE;;2DAEiD;YACjD;;iFAEuE;YACvE;;+CAEqC;SAEtC,CAAC,CAAC;QACP,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YAC/C,sBAAsB;YACtB,4BAA4B;YAC5B,gCAAgC;SACjC,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;IAEH,IAAI,CAAC,4BAA4B,EAAE,GAAQ,EAAE;QAC3C,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC5D,MAAM,WAAW,GACb,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,EAAC,IAAI,EAAE,yBAAyB,EAAC,CAAC,CAAC,CAAC;QAC/D,aAAM,CAAC,SAAS,CACZ,MAAM,OAAO,CAAC,GAAG,CACb,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,EAChE;YACE;;+BAEqB;YACrB;;sCAE4B;YAC5B;;yDAE+C;YAC/C;;qEAE2D;YAC3D;;+EAEqE;SACtE,CAAC,CAAC;QACP,aAAM,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;YAC/C,iBAAiB;YACjB,wBAAwB;YACxB,0BAA0B;YAC1B,gCAAgC;YAChC,UAAU;SACX,CAAC,CAAC;IACL,CAAC,CAAA,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"css-custom-property-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\n\nimport {CodeUnderliner} from '../test-utils';\n\nconst testDir = path.join(__dirname, '..', 'static');\n\nsuite('CssCustomPropertyScanner', () => {\n  let analyzer: Analyzer;\n  let underliner: CodeUnderliner;\n\n  setup(() => {\n    const urlLoader = new FSUrlLoader(testDir);\n    analyzer = new Analyzer({urlLoader});\n    underliner = new CodeUnderliner(urlLoader);\n  });\n\n  test('finds custom property assignments', async() => {\n    const result = await analyzer.analyze(['some-styles.html']);\n    const assignments =\n        [...result.getFeatures({kind: 'css-custom-property-assignment'})];\n    assert.deepEqual(\n        await Promise.all(\n            assignments.map((a) => underliner.underline(a.sourceRange))),\n        [\n          `\n      --primary-text-color: var(--light-theme-text-color);\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n          `\n      --primary-background-color: var(--light-theme-background-color, --orange);\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n          `\n      --light-theme-background-color: #ffffff;\n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`\n\n        ]);\n    assert.deepEqual(assignments.map((a) => a.name), [\n      '--primary-text-color',\n      '--primary-background-color',\n      '--light-theme-background-color'\n    ]);\n  });\n\n  test('finds custom property uses', async() => {\n    const result = await analyzer.analyze(['some-styles.html']);\n    const assignments =\n        [...result.getFeatures({kind: 'css-custom-property-use'})];\n    assert.deepEqual(\n        await Promise.all(\n            assignments.map((a) => underliner.underline(a.sourceRange))),\n        [\n          `\n        @apply(--layout-inline);\n               ~~~~~~~~~~~~~~~`,\n          `\n        @apply --layout-center-center;\n               ~~~~~~~~~~~~~~~~~~~~~~`,\n          `\n      --primary-text-color: var(--light-theme-text-color);\n                                ~~~~~~~~~~~~~~~~~~~~~~~~`,\n          `\n      --primary-background-color: var(--light-theme-background-color, --orange);\n                                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~`,\n          `\n      --primary-background-color: var(--light-theme-background-color, --orange);\n                                                                      ~~~~~~~~`,\n        ]);\n    assert.deepEqual(assignments.map((a) => a.name), [\n      '--layout-inline',\n      '--layout-center-center',\n      '--light-theme-text-color',\n      '--light-theme-background-color',\n      '--orange'\n    ]);\n  });\n});\n"]}
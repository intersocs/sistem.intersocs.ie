{"version":3,"sources":["test/model/warning_test.ts"],"names":[],"mappings":"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","file":"warning_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport {knuthShuffle} from 'knuth-shuffle';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {applyEdits, Document, Replacement} from '../../model/model';\nimport {ResolvedUrl} from '../../model/url';\nimport {ParsedDocument} from '../../parser/document';\nimport {InMemoryOverlayUrlLoader} from '../../url-loader/overlay-loader';\n\nsuite('applyEdits', () => {\n  let memoryMap: InMemoryOverlayUrlLoader;\n  let loader: (url: string) => Promise<ParsedDocument<any, any>>;\n\n  setup(() => {\n    memoryMap = new InMemoryOverlayUrlLoader();\n    memoryMap.urlContentsMap.set('test.html', 'abc');\n    const analyzer = new Analyzer({urlLoader: memoryMap});\n    loader = async(url: string) => {\n      const analysis = await analyzer.analyze([url]);\n      const document = analysis.getDocument(url) as Document;\n      return document.parsedDocument;\n    };\n  });\n\n  function makeTestReplacement(\n      startLine: number,\n      startColumn: number,\n      endLine: number,\n      endColumn: number,\n      replacementText: string): Replacement {\n    return {\n      range: {\n        file: 'test.html' as ResolvedUrl,\n        start: {line: startLine, column: startColumn},\n        end: {line: endLine, column: endColumn}\n      },\n      replacementText\n    };\n  };\n\n  test('works in the trivial case', async() => {\n    const contents = 'abc';\n    memoryMap.urlContentsMap.set('test.html', contents);\n\n    const result = await applyEdits([], loader);\n    assert.deepEqual(result.appliedEdits, []);\n    assert.deepEqual(result.incompatibleEdits, []);\n    assert.deepEqual(Array.from(result.editedFiles.entries()), []);\n  });\n\n  test('can apply a simple single edit', async() => {\n    const edit = [makeTestReplacement(0, 1, 0, 2, 'd')];\n    const result = await applyEdits([edit], loader);\n    assert.deepEqual(result.appliedEdits, [edit]);\n    assert.deepEqual(result.incompatibleEdits, []);\n    assert.deepEqual(\n        Array.from(result.editedFiles.entries()), [['test.html', 'adc']]);\n  });\n\n  test('can apply two compatible edits', async() => {\n    const edit1 = [makeTestReplacement(0, 1, 0, 2, 'd')];\n    const edit2 = [makeTestReplacement(0, 2, 0, 3, 'g')];\n    const result = await applyEdits([edit1, edit2], loader);\n    assert.deepEqual(result.appliedEdits, [edit1, edit2]);\n    assert.deepEqual(result.incompatibleEdits, []);\n    assert.deepEqual(\n        Array.from(result.editedFiles.entries()), [['test.html', 'adg']]);\n  });\n\n  test('does not apply an internally inconsistent edit', async() => {\n    const edit = [\n      makeTestReplacement(0, 0, 0, 3, 'def'),\n      makeTestReplacement(0, 0, 0, 3, 'ghi'),\n    ];\n    const result = await applyEdits([edit], loader);\n    assert.deepEqual(result.appliedEdits, []);\n    assert.deepEqual(result.incompatibleEdits, [edit]);\n    assert.deepEqual(Array.from(result.editedFiles.entries()), []);\n  });\n\n  let testName = 'takes edits in order, rejecting those incompatible ' +\n      'with the accepted ones so far';\n  test(testName, async() => {\n    const edits = [\n      [makeTestReplacement(0, 0, 0, 1, '1')],\n      [makeTestReplacement(0, 0, 0, 3, '!!!')],\n      [makeTestReplacement(0, 2, 0, 3, '3')],\n    ];\n    const result = await applyEdits(edits, loader);\n    assert.deepEqual(result.appliedEdits, [edits[0], edits[2]]);\n    assert.deepEqual(result.incompatibleEdits, [edits[1]]);\n    assert.deepEqual(\n        Array.from(result.editedFiles.entries()), [['test.html', '1b3']]);\n  });\n\n  testName = 'can deal with inserting, replacing and removing characters';\n  test(testName, async() => {\n    const edits = [\n      [makeTestReplacement(0, 0, 0, 0, '0000')],\n      [makeTestReplacement(0, 0, 0, 1, '111')],\n      [makeTestReplacement(0, 1, 0, 2, '')],\n      [makeTestReplacement(0, 2, 0, 3, '33')],\n      [makeTestReplacement(0, 3, 0, 3, '4')],\n    ];\n    // These edits are valid from any order, try a bunch of them.\n    for (let _ = 0; _ < 1000; _++) {\n      const shuffledEdits = Array.from(edits);\n      knuthShuffle(shuffledEdits);\n      const result = await applyEdits(shuffledEdits, loader);\n      assert.deepEqual(result.appliedEdits, shuffledEdits);\n      assert.deepEqual(result.incompatibleEdits, []);\n      assert.deepEqual(\n          Array.from(result.editedFiles.entries()),\n          [['test.html', '0000111334']]);\n    }\n  });\n\n  testName = 'can do two inserts into the same location without conflict';\n  test(testName, async() => {\n    const edits = [\n      [makeTestReplacement(0, 0, 0, 0, 'xxxx')],\n      [makeTestReplacement(0, 0, 0, 0, 'yyyy')],\n    ];\n    const result = await applyEdits(edits, loader);\n    assert.deepEqual(result.appliedEdits, edits);\n    assert.deepEqual(result.incompatibleEdits, []);\n    assert.deepEqual(\n        Array.from(result.editedFiles.entries()),\n        [['test.html', 'yyyyxxxxabc']]);\n  });\n});\n"]}
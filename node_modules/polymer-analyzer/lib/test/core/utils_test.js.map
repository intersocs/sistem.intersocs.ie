{"version":3,"sources":["test/core/utils_test.ts"],"names":[],"mappings":"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","file":"utils_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/// <reference path=\"../../../node_modules/@types/mocha/index.d.ts\" />\n\nimport {assert, use} from 'chai';\nimport {Url} from 'url';\n\nimport {Deferred, parseUrl} from '../../core/utils';\n\nimport chaiAsPromised = require('chai-as-promised');\nimport {invertPromise} from '../test-utils';\nuse(chaiAsPromised);\n\nsuite('parseUrl', () => {\n\n  function testUrl(url: string, properties: Partial<Url>) {\n    const urlObject = parseUrl(url);\n    for (const strKey of Object.keys(properties)) {\n      const key = strKey as keyof Url;\n      assert.equal(urlObject[key], properties[key], `${url} property ${key}`);\n    }\n  }\n\n  test('parses urls that are absolute paths', () => {\n    testUrl(\n        '/abs/path',\n        {protocol: undefined, hostname: undefined, pathname: '/abs/path'});\n    testUrl('/abs/path?query=string#hash', {\n      protocol: undefined,\n      hostname: undefined,\n      pathname: '/abs/path',\n      hash: '#hash',\n      search: '?query=string',\n    });\n  });\n\n  test('parses urls without protocol', () => {\n    testUrl('//host/path', {\n      protocol: undefined,\n      hostname: 'host',\n      pathname: '/path',\n    });\n    testUrl('//host', {\n      protocol: undefined,\n      hostname: 'host',\n      pathname: undefined,\n    });\n  });\n\n  test('parses urls that have protocols', () => {\n    testUrl('https://host/path', {\n      protocol: 'https:',\n      hostname: 'host',\n      pathname: '/path',\n    });\n  });\n});\n\nsuite('Deferred', () => {\n\n  test('resolves', async() => {\n    const deferred = new Deferred<string>();\n    deferred.resolve('foo');\n    assert.deepEqual(await deferred.promise, 'foo');\n  });\n\n  test('rejects', async() => {\n    const deferred = new Deferred<string>();\n    deferred.reject(new Error('foo'));\n    assert.deepEqual((await invertPromise(deferred.promise)).message, 'foo');\n  });\n\n  test('resolves only once', async() => {\n    const deferred = new Deferred<string>();\n    deferred.resolve('foo');\n    try {\n      deferred.resolve('bar');\n      assert.fail();\n    } catch (e) {\n      // pass\n    }\n    try {\n      deferred.reject(new Error('bar'));\n      assert.fail();\n    } catch (e) {\n      // pass\n    }\n  });\n\n  test('rejects', async() => {\n    const deferred = new Deferred<string>();\n    deferred.reject(new Error('foo'));\n    deferred.promise.catch((_) => {});\n    try {\n      deferred.resolve('bar');\n      assert.fail();\n    } catch (e) {\n      // pass\n    }\n    try {\n      deferred.reject(new Error('bar'));\n      assert.fail();\n    } catch (e) {\n      // pass\n    }\n  });\n\n});\n"]}
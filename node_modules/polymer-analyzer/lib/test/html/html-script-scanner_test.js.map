{"version":3,"sources":["test/html/html-script-scanner_test.ts"],"names":[],"mappings":"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","file":"html-script-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\nimport * as path from 'path';\n\nimport {Analyzer} from '../../core/analyzer';\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlParser} from '../../html/html-parser';\nimport {HtmlScriptScanner} from '../../html/html-script-scanner';\nimport {JavaScriptDocument} from '../../javascript/javascript-document';\nimport {Analysis} from '../../model/analysis';\nimport {ScannedImport, ScannedInlineDocument} from '../../model/model';\nimport {ResolvedUrl} from '../../model/url';\nimport {FSUrlLoader} from '../../url-loader/fs-url-loader';\n\nconst fixturesDir = path.resolve(__dirname, '../static');\nsuite('HtmlScriptScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: HtmlScriptScanner;\n\n    setup(() => {\n      scanner = new HtmlScriptScanner();\n    });\n\n    test('finds external and inline scripts', async() => {\n      const contents = `<html><head>\n          <script src=\"foo.js\"></script>\n          <script>console.log('hi')</script>\n        </head></html>`;\n      const document =\n          new HtmlParser().parse(contents, 'test-document.html' as ResolvedUrl);\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 2);\n      assert.instanceOf(features[0], ScannedImport);\n      const feature0 = features[0] as ScannedImport;\n      assert.equal(feature0.type, 'html-script');\n      assert.equal(feature0.url, 'foo.js');\n      assert.instanceOf(features[1], ScannedInlineDocument);\n      const feature1 = features[1] as ScannedInlineDocument;\n      assert.equal(feature1.type, 'js');\n      assert.equal(feature1.contents, `console.log('hi')`);\n      assert.deepEqual(feature1.locationOffset, {line: 2, col: 18});\n    });\n\n    test('finds external scripts relative to baseUrl', async() => {\n      const contents = `<html><head><base href=\"/aybabtu/\">\n          <script src=\"foo.js\"></script>\n        </head></html>`;\n      const document =\n          new HtmlParser().parse(contents, 'test-document.html' as ResolvedUrl);\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 1);\n      assert.instanceOf(features[0], ScannedImport);\n      const feature0 = features[0] as ScannedImport;\n      assert.equal(feature0.type, 'html-script');\n      assert.equal(feature0.url, '/aybabtu/foo.js');\n    });\n\n    suite('modules', () => {\n      const urlLoader = new FSUrlLoader(fixturesDir);\n      const analyzer = new Analyzer({urlLoader});\n      let analysis: Analysis;\n\n      before(async() => {\n        analysis = await analyzer.analyze(['js-modules.html']);\n      });\n\n      test('finds external module scripts', () => {\n        const htmlScripts = [...analysis.getFeatures({kind: 'html-script'})];\n        assert.equal(htmlScripts.length, 1);\n        const js = htmlScripts[0].document.parsedDocument as JavaScriptDocument;\n        assert.equal(js.url, 'javascript/module.js');\n        assert.equal(js.parsedAsSourceType, 'module');\n        assert.equal(\n            js.contents.trim(), `import * as submodule from './submodule.js';`);\n      });\n\n      test('finds inline module scripts', () => {\n        const inlineDocuments =\n            [...analysis.getFeatures({kind: 'inline-document'})];\n        assert.equal(inlineDocuments.length, 1);\n        const js = inlineDocuments[0].parsedDocument as JavaScriptDocument;\n        assert.equal(js.url, 'js-modules.html');\n        assert.equal(js.parsedAsSourceType, 'module');\n        assert.equal(\n            js.contents.trim(),\n            `import * as something from './javascript/module-with-export.js';`);\n      });\n\n      test('follows import statements in modules', async() => {\n        const jsImports = [...analysis.getFeatures({kind: 'js-import'})];\n        assert.equal(jsImports.length, 2);\n\n        // import statement in inline module script in 'js-modules.html'\n        const js0 = jsImports[0].document.parsedDocument as JavaScriptDocument;\n        assert.equal(js0.url, 'javascript/module-with-export.js');\n        assert.equal(js0.parsedAsSourceType, 'module');\n        assert.equal(\n            js0.contents.trim(), `export const someValue = 'value goes here';`);\n\n        // import statement in external module script 'javascript/module.js'\n        const js1 = jsImports[1].document.parsedDocument as JavaScriptDocument;\n        assert.equal(js1.url, 'javascript/submodule.js');\n        assert.equal(js1.parsedAsSourceType, 'module');\n        assert.equal(\n            js1.contents.trim(), `export const subThing = 'sub-thing';`);\n      });\n    });\n  });\n});\n"]}
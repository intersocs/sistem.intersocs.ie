{"version":3,"sources":["test/url-loader/package-url-resolver_test.ts"],"names":[],"mappings":"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","file":"package-url-resolver_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {PackageRelativeUrl} from '../../model/url';\nimport {PackageUrlResolver} from '../../url-loader/package-url-resolver';\n\nsuite('PackageUrlResolver', function() {\n\n  suite('canResolve', () => {\n\n    test('is true an in-package URL', () => {\n      const r = new PackageUrlResolver();\n      assert.isTrue(r.canResolve('foo.html'));\n      assert.isTrue(r.canResolve('/foo.html'));\n      assert.isTrue(r.canResolve('./foo.html'));\n    });\n\n    test('is true for a sibling URL', () => {\n      assert.isTrue(new PackageUrlResolver().canResolve('../foo/foo.html'));\n    });\n\n    test('is false for a cousin URL', () => {\n      assert.isFalse(new PackageUrlResolver().canResolve('../../foo/foo.html'));\n    });\n\n    test('is false for URL with a hostname', () => {\n      const r = new PackageUrlResolver();\n      assert.isFalse(r.canResolve('http://abc.xyz/foo.html'));\n      assert.isFalse(r.canResolve('//abc.xyz/foo.html'));\n    });\n\n    test('is true for a URL with the right hostname', () => {\n      const r = new PackageUrlResolver({\n        hostname: 'abc.xyz',\n      });\n      assert.isTrue(r.canResolve('http://abc.xyz/foo.html'));\n      assert.isTrue(r.canResolve('http://abc.xyz/./foo.html'));\n      assert.isTrue(r.canResolve('http://abc.xyz/../foo.html'));\n      assert.isTrue(r.canResolve('http://abc.xyz/foo/../foo.html'));\n      assert.isTrue(r.canResolve('//abc.xyz/foo.html'));\n    });\n\n    test('is false for an undecodable URL', () => {\n      const r = new PackageUrlResolver();\n      assert.isFalse(r.canResolve('%><><%='));\n    });\n  });\n\n  suite('resolve', () => {\n\n    test('resolves an in-package URL', () => {\n      const r = new PackageUrlResolver();\n      assert.equal('foo.html', r.resolve('foo.html' as PackageRelativeUrl));\n      assert.equal('foo.html', r.resolve('/foo.html' as PackageRelativeUrl));\n      assert.equal('foo.html', r.resolve('./foo.html' as PackageRelativeUrl));\n    });\n\n    test('resolves a sibling URL', () => {\n      assert.equal(\n          'bower_components/foo/foo.html',\n          new PackageUrlResolver().resolve(\n              '../foo/foo.html' as PackageRelativeUrl));\n    });\n\n    test('throws for a cousin URL', () => {\n      assert.throws(\n          () => new PackageUrlResolver().resolve(\n              '../../foo/foo.html' as PackageRelativeUrl));\n    });\n\n    test('throws for a URL with a hostname', () => {\n      assert.throws(\n          () => new PackageUrlResolver().resolve(\n              'http://abc.xyz/foo.html' as PackageRelativeUrl));\n    });\n\n    test('resolves a URL with the right hostname', () => {\n      const r = new PackageUrlResolver({\n        componentDir: 'components',\n        hostname: 'abc.xyz',\n      });\n      assert.equal(\n          'foo.html',\n          r.resolve('http://abc.xyz/foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo.html',\n          r.resolve('http://abc.xyz/./foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo.html',\n          r.resolve('http://abc.xyz/../foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo.html',\n          r.resolve('http://abc.xyz/foo/../foo.html' as PackageRelativeUrl));\n\n      assert.equal('foo.html', r.resolve('foo.html' as PackageRelativeUrl));\n      assert.equal('foo.html', r.resolve('./foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'components/foo/foo.html',\n          r.resolve('../foo/foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo.html', r.resolve('foo/../foo.html' as PackageRelativeUrl));\n\n      assert.equal('foo.html', r.resolve('/foo.html' as PackageRelativeUrl));\n      assert.equal('foo.html', r.resolve('/./foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo/foo.html', r.resolve('/../foo/foo.html' as PackageRelativeUrl));\n      assert.equal(\n          'foo.html', r.resolve('/foo/../foo.html' as PackageRelativeUrl));\n\n    });\n\n    test('resolves a URL with spaces', () => {\n      const r = new PackageUrlResolver();\n      assert.equal(\n          r.resolve('spaced name.html' as PackageRelativeUrl),\n          'spaced%20name.html');\n    });\n  });\n\n});\n"]}
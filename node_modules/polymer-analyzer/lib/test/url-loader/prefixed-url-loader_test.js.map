{"version":3,"sources":["test/url-loader/prefixed-url-loader_test.ts"],"names":[],"mappings":"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","file":"prefixed-url-loader_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {ResolvedUrl} from '../../model/url';\nimport {PrefixedUrlLoader} from '../../url-loader/prefixed-url-loader';\nimport {UrlLoader} from '../../url-loader/url-loader';\nimport {invertPromise} from '../test-utils';\n\nclass MockLoader implements UrlLoader {\n  canLoadUrls: string[];\n  loadUrls: string[];\n  constructor(private _load: string|null) {\n    this.reset();\n  }\n\n  reset() {\n    this.canLoadUrls = [];\n    this.loadUrls = [];\n  }\n\n  canLoad(url: string): boolean {\n    this.canLoadUrls.push(url);\n    return this._load != null;\n  }\n\n  async load(url: string): Promise<string> {\n    this.loadUrls.push(url);\n    if (this._load == null) {\n      throw new Error(`Tried to load \"${url}\", and delegate can't load it.`);\n    }\n    return this._load;\n  }\n}\n\nsuite('PrefixedUrlLoader', () => {\n\n  suite('canLoad', () => {\n\n    test('canLoad is true if the url starts with prefix', () => {\n      const delegate = new MockLoader('stuff');\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      assert.isTrue(loader.canLoad('path/to/stuff/file.html' as ResolvedUrl));\n      // Delegate receives an unprefixed url to check.\n      assert.deepEqual(delegate.canLoadUrls, ['file.html']);\n    });\n\n    test('canLoad is false if the url does not start with prefix', () => {\n      const delegate = new MockLoader('stuff');\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      assert.isFalse(loader.canLoad('path/to/other/file.html' as ResolvedUrl));\n      // Delegate is not consulted.\n      assert.deepEqual(delegate.canLoadUrls, []);\n    });\n\n    test('canLoad is false if the delgate loader says it is', () => {\n      const delegate = new MockLoader(null);\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      assert.isFalse(loader.canLoad('path/to/stuff/file.html' as ResolvedUrl));\n      // Delegate receives an unprefixed url to check.\n      assert.deepEqual(delegate.canLoadUrls, ['file.html']);\n    });\n  });\n\n  suite('load', () => {\n\n    test('load returns content if url starts with prefix', async() => {\n      const delegate = new MockLoader('stuff');\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      assert.deepEqual(\n          await loader.load('path/to/stuff/file.html' as ResolvedUrl), 'stuff');\n      // Delegate receives an unprefixed url to load.\n      assert.deepEqual(delegate.loadUrls, ['file.html']);\n    });\n\n    test('load throws error if url does not start with prefix', async() => {\n      const delegate = new MockLoader('stuff');\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      const error = await invertPromise(\n          loader.load('path/to/other/file.html' as ResolvedUrl));\n      assert.instanceOf(error, Error);\n      assert.deepEqual(\n          error.message,\n          'Can not load \"path/to/other/file.html\", does not match prefix \"path/to/stuff/\".');\n      // Delegate is not consulted.\n      assert.deepEqual(delegate.loadUrls, []);\n    });\n\n    test('load passes on delegate error if url starts with prefix', async() => {\n      const delegate = new MockLoader(null);\n      const loader = new PrefixedUrlLoader('path/to/stuff/', delegate);\n      const error = await invertPromise(\n          loader.load('path/to/stuff/file.html' as ResolvedUrl));\n      assert.instanceOf(error, Error);\n      assert.deepEqual(\n          error.message,\n          'Tried to load \"file.html\", and delegate can\\'t load it.');\n      // Delegate was asked.\n      assert.deepEqual(delegate.loadUrls, ['file.html']);\n\n    });\n  });\n});\n"]}
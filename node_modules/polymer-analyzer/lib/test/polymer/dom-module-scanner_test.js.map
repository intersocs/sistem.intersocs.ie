{"version":3,"sources":["test/polymer/dom-module-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAGH,+BAA4B;AAG5B,wDAAkD;AAElD,yEAAkE;AAClE,8CAA6C;AAE7C,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAE7B,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE;QACnB,IAAI,OAAyB,CAAC;QAE9B,KAAK,CAAC,GAAG,EAAE;YACT,OAAO,GAAG,IAAI,qCAAgB,EAAE,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,EAAE,GAAQ,EAAE;YAChC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;gBAaP,CAAC;YACX,MAAM,QAAQ,GACV,IAAI,wBAAU,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,WAA0B,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,CAAM,OAAoB,EAAE,EAAE,gDAAC,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEvE,MAAM,EAAC,QAAQ,EAAE,UAAU,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnE,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACnC,aAAM,CAAC,SAAS,CACZ,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QACrE,CAAC,CAAA,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,GAAQ,EAAE;YAClD,MAAM,QAAQ,GAAG;;;;;;;;;;gBAUP,CAAC;YACX,MAAM,QAAQ,GACV,IAAI,wBAAU,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,WAA0B,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,CAAM,OAAoB,EAAE,EAAE,gDAAC,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YACvE,MAAM,UAAU,GAAG,2BAAc,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAErE,MAAM,EAAC,QAAQ,EAAE,UAAU,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACnE,aAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACnC,aAAM,CAAC,SAAS,CACZ,MAAM,UAAU,CAAC,SAAS,CACtB,UAAU,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,EAC3D;gBACE;;6BAEiB;gBACjB;;yCAE6B;aAC9B,CAAC,CAAC;YACP,aAAM,CAAC,SAAS,CAAC,MAAM,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC;;wCAEpC,CAAC,CAAC,CAAC;QACvC,CAAC,CAAA,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"dom-module-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n\nimport {assert} from 'chai';\n\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlParser} from '../../html/html-parser';\nimport {ResolvedUrl} from '../../model/url';\nimport {DomModuleScanner} from '../../polymer/dom-module-scanner';\nimport {CodeUnderliner} from '../test-utils';\n\nsuite('DomModuleScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: DomModuleScanner;\n\n    setup(() => {\n      scanner = new DomModuleScanner();\n    });\n\n    test('finds local IDs', async() => {\n      const contents = `<html><head></head>\n        <body>\n          <dom-module>\n            <template>\n              <div id=\"foo\"></div>\n              <span id=\"bar\"></div>\n              <div id2=\"nope\"></div>\n              <template>\n                <div id=\"nada\"></div>\n              </template>\n            </template>\n          </dom-module>\n        </body>\n        </html>`;\n      const document =\n          new HtmlParser().parse(contents, 'test.html' as ResolvedUrl);\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features: domModules} = await scanner.scan(document, visit);\n      assert.equal(domModules.length, 1);\n      assert.deepEqual(\n          domModules[0].localIds.map((lid) => lid.name), ['foo', 'bar']);\n    });\n\n    test('finds databinding expressions IDs', async() => {\n      const contents = `<html><head></head>\n        <body>\n          <dom-module>\n            <template>\n              <div id=\"{{foo}}\"></div>\n              <span id=\"{{bar(baz, boop)}}\"></div>\n              <other-elem prop=\"{{foo bar}}\"></other-elem>\n            </template>\n          </dom-module>\n        </body>\n        </html>`;\n      const document =\n          new HtmlParser().parse(contents, 'test.html' as ResolvedUrl);\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n      const underliner = CodeUnderliner.withMapping('test.html', contents);\n\n      const {features: domModules} = await scanner.scan(document, visit);\n      assert.equal(domModules.length, 1);\n      assert.deepEqual(\n          await underliner.underline(\n              domModules[0].databindings.map((db) => db.sourceRange)),\n          [\n            `\n              <div id=\"{{foo}}\"></div>\n                         ~~~`,\n            `\n              <span id=\"{{bar(baz, boop)}}\"></div>\n                          ~~~~~~~~~~~~~~`\n          ]);\n      assert.deepEqual(await underliner.underline(domModules[0].warnings), [`\n              <other-elem prop=\"{{foo bar}}\"></other-elem>\n                                      ~`]);\n    });\n  });\n\n});\n"]}
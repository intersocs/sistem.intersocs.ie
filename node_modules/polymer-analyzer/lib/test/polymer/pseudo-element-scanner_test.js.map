{"version":3,"sources":["test/polymer/pseudo-element-scanner_test.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;GAYG;;;;;;;;;;AAEH,+BAA4B;AAG5B,wDAAkD;AAElD,iFAA0E;AAE1E,KAAK,CAAC,sBAAsB,EAAE,GAAG,EAAE;IAEjC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE;QACnB,IAAI,OAA6B,CAAC;QAElC,KAAK,CAAC,GAAG,EAAE;YACT,OAAO,GAAG,IAAI,6CAAoB,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yCAAyC,EAAE,GAAQ,EAAE;YACxD,MAAM,IAAI,GAAG,0BAA0B,CAAC;YACxC,MAAM,QAAQ,GAAG;;YAEX,IAAI;;;;;gBAKA,CAAC;YACX,MAAM,QAAQ,GACV,IAAI,wBAAU,EAAE,CAAC,KAAK,CAAC,QAAQ,EAAE,WAA0B,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,CAAM,OAAoB,EAAE,EAAE,gDAAC,MAAM,CAAN,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAA,GAAA,CAAC;YAEvE,MAAM,EAAC,QAAQ,EAAC,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACvD,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACjC,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC3C,aAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;YAC3B,aAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC;YACnD,aAAM,CAAC,SAAS,CACZ,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,iBAAiB,EAAC,CAAC,CAAC,CAAC;QACpE,CAAC,CAAA,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"pseudo-element-scanner_test.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {assert} from 'chai';\n\nimport {HtmlVisitor} from '../../html/html-document';\nimport {HtmlParser} from '../../html/html-parser';\nimport {ResolvedUrl} from '../../model/url';\nimport {PseudoElementScanner} from '../../polymer/pseudo-element-scanner';\n\nsuite('PseudoElementScanner', () => {\n\n  suite('scan()', () => {\n    let scanner: PseudoElementScanner;\n\n    setup(() => {\n      scanner = new PseudoElementScanner();\n    });\n\n    test('finds pseudo elements in html comments ', async() => {\n      const desc = `This is a pseudo element`;\n      const contents = `<html><head></head><body>\n          <!--\n          ${desc}\n          @pseudoElement x-foo\n          @demo demo/index.html\n          -->\n        </body>\n        </html>`;\n      const document =\n          new HtmlParser().parse(contents, 'test.html' as ResolvedUrl);\n      const visit = async(visitor: HtmlVisitor) => document.visit([visitor]);\n\n      const {features} = await scanner.scan(document, visit);\n      assert.equal(features.length, 1);\n      assert.equal(features[0].tagName, 'x-foo');\n      assert(features[0].pseudo);\n      assert.equal(features[0].description.trim(), desc);\n      assert.deepEqual(\n          features[0].demos, [{desc: 'demo', path: 'demo/index.html'}]);\n    });\n\n  });\n\n});\n"]}
{"version":3,"file":"firebase-performance-standalone.es2017.js","sources":["../util/src/deepCopy.ts","../util/src/errors.ts","../util/src/obj.ts","../app/src/errors.ts","../app/src/constants.ts","../app/src/lite/firebaseAppLite.ts","../app/index.lite.ts","../app/src/lite/firebaseNamespaceLite.ts","../app/src/firebaseNamespaceCore.ts","../../node_modules/idb/lib/idb.mjs","../installations/src/util/constants.ts","../installations/src/util/errors.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/api/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/api/create-installation.ts","../installations/src/api/generate-auth-token.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/functions/get-token.ts","../installations/src/api/delete-installation.ts","../installations/src/index.ts","../logger/src/logger.ts","../installations/src/functions/get-id.ts","../installations/src/functions/delete-installation.ts","../performance/src/constants.ts","../performance/src/utils/errors.ts","../performance/src/services/api_service.ts","../performance/src/services/settings_service.ts","../performance/src/services/iid_service.ts","../performance/src/utils/attributes_utils.ts","../performance/src/utils/console_logger.ts","../performance/src/services/remote_config_service.ts","../performance/src/services/initialization_service.ts","../performance/src/services/cc_service.ts","../performance/src/services/perf_logger.ts","../performance/src/resources/trace.ts","../performance/src/resources/network_request.ts","../performance/src/services/oob_resources_service.ts","../performance/src/controllers/perf.ts","../performance/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    if (!source.hasOwnProperty(prop)) {\n      continue;\n    }\n    (target as { [key: string]: unknown })[prop] = deepExtend(\n      (target as { [key: string]: unknown })[prop],\n      (source as { [key: string]: unknown })[prop]\n    );\n  }\n\n  return target;\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if (e.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: StringLike | undefined;\n}\n\nexport interface FirebaseError extends Error, ErrorData {\n  // Unique code for error - format is service/error-code-string.\n  readonly code: string;\n\n  // Developer-friendly error message.\n  readonly message: string;\n\n  // Always 'FirebaseError'.\n  readonly name: typeof ERROR_NAME;\n\n  // Where available - stack backtrace in a string.\n  readonly stack?: string;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  readonly name = ERROR_NAME;\n\n  constructor(readonly code: string, message: string) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage);\n\n    // Keys with an underscore at the end of their name are not included in\n    // error.data for some reason.\n    // TODO: Replace with Object.entries when lib is updated to es2017.\n    for (const key of Object.keys(customData)) {\n      if (key.slice(-1) !== '_') {\n        if (key in error) {\n          console.warn(\n            `Overwriting FirebaseError base field \"${key}\" can cause unexpected behavior.`\n          );\n        }\n        error[key] = customData[key];\n      }\n    }\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? value.toString() : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: keyof T): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  DUPLICATE_SERVICE = 'duplicate-service',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]: \"Firebase App named '{$appName}' already exists\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.DUPLICATE_SERVICE]:\n    \"Firebase service named '{$appName}' already registered\",\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.'\n};\n\ntype ErrorParams = { [key in AppError]: { appName: string } };\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppConfig\n} from '@firebase/app-types';\nimport {\n  _FirebaseApp,\n  _FirebaseNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { deepCopy, deepExtend } from '@firebase/util';\nimport { ERROR_FACTORY, AppError } from '../errors';\nimport { DEFAULT_ENTRY_NAME } from '../constants';\n\ninterface ServicesCache {\n  [name: string]: {\n    [serviceName: string]: FirebaseService;\n  };\n}\n\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nexport class FirebaseAppLiteImpl implements FirebaseApp {\n  private readonly options_: FirebaseOptions;\n  private readonly name_: string;\n  private isDeleted_ = false;\n  private services_: ServicesCache = {};\n  private automaticDataCollectionEnabled_: boolean;\n\n  // lite version has an empty INTERNAL namespace\n  readonly INTERNAL = {};\n\n  constructor(\n    options: FirebaseOptions,\n    config: FirebaseAppConfig,\n    private readonly firebase_: _FirebaseNamespace\n  ) {\n    this.name_ = config.name!;\n    this.automaticDataCollectionEnabled_ =\n      config.automaticDataCollectionEnabled || false;\n    this.options_ = deepCopy<FirebaseOptions>(options);\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed_();\n    return this.automaticDataCollectionEnabled_;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this.checkDestroyed_();\n    this.automaticDataCollectionEnabled_ = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed_();\n    return this.name_;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed_();\n    return this.options_;\n  }\n\n  delete(): Promise<void> {\n    return new Promise(resolve => {\n      this.checkDestroyed_();\n      resolve();\n    })\n      .then(() => {\n        this.firebase_.INTERNAL.removeApp(this.name_);\n        const services: FirebaseService[] = [];\n\n        for (const serviceKey of Object.keys(this.services_)) {\n          for (const instanceKey of Object.keys(this.services_[serviceKey])) {\n            services.push(this.services_[serviceKey][instanceKey]);\n          }\n        }\n\n        return Promise.all(\n          services\n            .filter(service => 'INTERNAL' in service)\n            .map(service => service.INTERNAL!.delete())\n        );\n      })\n      .then(\n        (): void => {\n          this.isDeleted_ = true;\n          this.services_ = {};\n        }\n      );\n  }\n\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage is the only one that is leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  _getService(\n    name: string,\n    instanceIdentifier: string = DEFAULT_ENTRY_NAME\n  ): FirebaseService {\n    this.checkDestroyed_();\n\n    if (!this.services_[name]) {\n      this.services_[name] = {};\n    }\n\n    if (!this.services_[name][instanceIdentifier]) {\n      /**\n       * If a custom instance has been defined (i.e. not '[DEFAULT]')\n       * then we will pass that instance on, otherwise we pass `null`\n       */\n      const instanceSpecifier =\n        instanceIdentifier !== DEFAULT_ENTRY_NAME\n          ? instanceIdentifier\n          : undefined;\n      const service = this.firebase_.INTERNAL.factories[name](\n        this,\n        this.extendApp.bind(this),\n        instanceSpecifier\n      );\n      this.services_[name][instanceIdentifier] = service;\n    }\n\n    return this.services_[name][instanceIdentifier];\n  }\n\n  /**\n   * Callback function used to extend an App instance at the time\n   * of service instance creation.\n   */\n  private extendApp(props: { [name: string]: unknown }): void {\n    // Copy the object onto the FirebaseAppImpl prototype\n    deepExtend(this, props);\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed_(): void {\n    if (this.isDeleted_) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this.name_ });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createFirebaseNamespaceLite } from './src/lite/firebaseNamespaceLite';\n\nexport const firebase = createFirebaseNamespaceLite();\n\n// eslint-disable-next-line import/no-default-export\nexport default firebase;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from '@firebase/app-types';\nimport {\n  _FirebaseApp,\n  _FirebaseNamespace,\n  FirebaseServiceFactory,\n  AppHook,\n  FirebaseServiceNamespace,\n  FirebaseService\n} from '@firebase/app-types/private';\nimport { FirebaseAppLiteImpl } from './firebaseAppLite';\nimport { createFirebaseNamespaceCore } from '../firebaseNamespaceCore';\n\nexport function createFirebaseNamespaceLite(): FirebaseNamespace {\n  const namespace = createFirebaseNamespaceCore(FirebaseAppLiteImpl);\n\n  namespace.SDK_VERSION = `${namespace.SDK_VERSION}_LITE`;\n\n  const registerService = (namespace as _FirebaseNamespace).INTERNAL\n    .registerService;\n  (namespace as _FirebaseNamespace).INTERNAL.registerService = registerServiceForLite;\n\n  /**\n   * This is a special implementation, so it only works with performance.\n   * only allow performance SDK to register.\n   */\n  function registerServiceForLite(\n    name: string,\n    createService: FirebaseServiceFactory,\n    serviceProperties?: { [prop: string]: unknown },\n    appHook?: AppHook,\n    allowMultipleInstances?: boolean\n  ): FirebaseServiceNamespace<FirebaseService> {\n    // only allow performance to register with firebase lite\n    if (name !== 'performance' && name !== 'installations') {\n      throw Error(`${name} cannot register with the standalone perf instance`);\n    }\n\n    return registerService(\n      name,\n      createService,\n      serviceProperties,\n      appHook,\n      allowMultipleInstances\n    );\n  }\n\n  return namespace;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseNamespace,\n  FirebaseAppConfig\n} from '@firebase/app-types';\nimport {\n  _FirebaseApp,\n  _FirebaseNamespace,\n  FirebaseService,\n  FirebaseServiceFactory,\n  FirebaseServiceNamespace,\n  AppHook\n} from '@firebase/app-types/private';\nimport { deepExtend, contains } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { FirebaseAppLiteImpl } from './lite/firebaseAppLite';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { version } from '../../firebase/package.json';\n\n/**\n * Because auth can't share code with other components, we attach the utility functions\n * in an internal namespace to share code.\n * This function return a firebase namespace object without\n * any utility functions, so it can be shared between the regular firebaseNamespace and\n * the lite version.\n */\nexport function createFirebaseNamespaceCore(\n  firebaseAppImpl: typeof FirebaseAppImpl | typeof FirebaseAppLiteImpl\n): FirebaseNamespace {\n  const apps: { [name: string]: FirebaseApp } = {};\n  const factories: { [service: string]: FirebaseServiceFactory } = {};\n  const appHooks: { [service: string]: AppHook } = {};\n\n  // A namespace is a plain JavaScript Object.\n  const namespace: FirebaseNamespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp,\n    // @ts-ignore\n    app,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: version,\n    INTERNAL: {\n      registerService,\n      removeApp,\n      factories,\n      useAsService\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (namespace as any)['default'] = namespace;\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    const app = apps[name];\n    callAppHooks(app, 'delete');\n    delete apps[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || DEFAULT_ENTRY_NAME;\n    if (!contains(apps, name)) {\n      throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n    }\n    return apps[name];\n  }\n\n  // @ts-ignore\n  app['App'] = firebaseAppImpl;\n  /**\n   * Create a new App instance (name must be unique).\n   */\n  function initializeApp(\n    options: FirebaseOptions,\n    config?: FirebaseAppConfig\n  ): FirebaseApp;\n  function initializeApp(options: FirebaseOptions, name?: string): FirebaseApp;\n  function initializeApp(\n    options: FirebaseOptions,\n    rawConfig = {}\n  ): FirebaseApp {\n    if (typeof rawConfig !== 'object' || rawConfig === null) {\n      const name = rawConfig;\n      rawConfig = { name };\n    }\n\n    const config = rawConfig as FirebaseAppConfig;\n\n    if (config.name === undefined) {\n      config.name = DEFAULT_ENTRY_NAME;\n    }\n\n    const { name } = config;\n\n    if (typeof name !== 'string' || !name) {\n      throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n        appName: String(name)\n      });\n    }\n\n    if (contains(apps, name)) {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n\n    const app = new firebaseAppImpl(\n      options,\n      config,\n      namespace as _FirebaseNamespace\n    );\n\n    apps[name] = app;\n    callAppHooks(app, 'create');\n\n    return app;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(name => apps[name]);\n  }\n\n  /*\n   * Register a Firebase Service.\n   *\n   * firebase.INTERNAL.registerService()\n   *\n   * TODO: Implement serviceProperties.\n   */\n  function registerService(\n    name: string,\n    createService: FirebaseServiceFactory,\n    serviceProperties?: { [prop: string]: unknown },\n    appHook?: AppHook,\n    allowMultipleInstances = false\n  ): FirebaseServiceNamespace<FirebaseService> {\n    // Cannot re-register a service that already exists\n    if (factories[name]) {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_SERVICE, { appName: name });\n    }\n\n    // Capture the service factory for later service instantiation\n    factories[name] = createService;\n\n    // Capture the appHook, if passed\n    if (appHook) {\n      appHooks[name] = appHook;\n\n      // Run the **new** app hook on all existing apps\n      getApps().forEach(app => {\n        appHook('create', app);\n      });\n    }\n\n    // The Service namespace is an accessor function ...\n    function serviceNamespace(appArg: FirebaseApp = app()): FirebaseService {\n      // @ts-ignore\n      if (typeof appArg[name] !== 'function') {\n        // Invalid argument.\n        // This happens in the following case: firebase.storage('gs:/')\n        throw ERROR_FACTORY.create(AppError.INVALID_APP_ARGUMENT, {\n          appName: name\n        });\n      }\n\n      // Forward service instance lookup to the FirebaseApp.\n      // @ts-ignore\n      return appArg[name]();\n    }\n\n    // ... and a container for service-level properties.\n    if (serviceProperties !== undefined) {\n      deepExtend(serviceNamespace, serviceProperties);\n    }\n\n    // Monkey-patch the serviceNamespace onto the firebase namespace\n    // @ts-ignore\n    namespace[name] = serviceNamespace;\n\n    // Patch the FirebaseAppImpl prototype\n    // @ts-ignore\n    firebaseAppImpl.prototype[name] =\n      // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\n      // option added to the no-explicit-any rule when ESlint releases it.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      function(...args: any) {\n        const serviceFxn = this._getService.bind(this, name);\n        return serviceFxn.apply(this, allowMultipleInstances ? args : []);\n      };\n\n    return serviceNamespace;\n  }\n\n  function callAppHooks(app: FirebaseApp, eventName: string): void {\n    for (const serviceName of Object.keys(factories)) {\n      // Ignore virtual services\n      const factoryName = useAsService(app, serviceName);\n      if (factoryName === null) {\n        return;\n      }\n\n      if (appHooks[factoryName]) {\n        appHooks[factoryName](eventName, app);\n      }\n    }\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    const useService = name;\n\n    return useService;\n  }\n\n  return namespace;\n}\n","function toArray(arr) {\n  return Array.prototype.slice.call(arr);\n}\n\nfunction promisifyRequest(request) {\n  return new Promise(function(resolve, reject) {\n    request.onsuccess = function() {\n      resolve(request.result);\n    };\n\n    request.onerror = function() {\n      reject(request.error);\n    };\n  });\n}\n\nfunction promisifyRequestCall(obj, method, args) {\n  var request;\n  var p = new Promise(function(resolve, reject) {\n    request = obj[method].apply(obj, args);\n    promisifyRequest(request).then(resolve, reject);\n  });\n\n  p.request = request;\n  return p;\n}\n\nfunction promisifyCursorRequestCall(obj, method, args) {\n  var p = promisifyRequestCall(obj, method, args);\n  return p.then(function(value) {\n    if (!value) return;\n    return new Cursor(value, p.request);\n  });\n}\n\nfunction proxyProperties(ProxyClass, targetProp, properties) {\n  properties.forEach(function(prop) {\n    Object.defineProperty(ProxyClass.prototype, prop, {\n      get: function() {\n        return this[targetProp][prop];\n      },\n      set: function(val) {\n        this[targetProp][prop] = val;\n      }\n    });\n  });\n}\n\nfunction proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return this[targetProp][prop].apply(this[targetProp], arguments);\n    };\n  });\n}\n\nfunction proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n  properties.forEach(function(prop) {\n    if (!(prop in Constructor.prototype)) return;\n    ProxyClass.prototype[prop] = function() {\n      return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n    };\n  });\n}\n\nfunction Index(index) {\n  this._index = index;\n}\n\nproxyProperties(Index, '_index', [\n  'name',\n  'keyPath',\n  'multiEntry',\n  'unique'\n]);\n\nproxyRequestMethods(Index, '_index', IDBIndex, [\n  'get',\n  'getKey',\n  'getAll',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(Index, '_index', IDBIndex, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nfunction Cursor(cursor, request) {\n  this._cursor = cursor;\n  this._request = request;\n}\n\nproxyProperties(Cursor, '_cursor', [\n  'direction',\n  'key',\n  'primaryKey',\n  'value'\n]);\n\nproxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n  'update',\n  'delete'\n]);\n\n// proxy 'next' methods\n['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n  if (!(methodName in IDBCursor.prototype)) return;\n  Cursor.prototype[methodName] = function() {\n    var cursor = this;\n    var args = arguments;\n    return Promise.resolve().then(function() {\n      cursor._cursor[methodName].apply(cursor._cursor, args);\n      return promisifyRequest(cursor._request).then(function(value) {\n        if (!value) return;\n        return new Cursor(value, cursor._request);\n      });\n    });\n  };\n});\n\nfunction ObjectStore(store) {\n  this._store = store;\n}\n\nObjectStore.prototype.createIndex = function() {\n  return new Index(this._store.createIndex.apply(this._store, arguments));\n};\n\nObjectStore.prototype.index = function() {\n  return new Index(this._store.index.apply(this._store, arguments));\n};\n\nproxyProperties(ObjectStore, '_store', [\n  'name',\n  'keyPath',\n  'indexNames',\n  'autoIncrement'\n]);\n\nproxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'put',\n  'add',\n  'delete',\n  'clear',\n  'get',\n  'getAll',\n  'getKey',\n  'getAllKeys',\n  'count'\n]);\n\nproxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n  'openCursor',\n  'openKeyCursor'\n]);\n\nproxyMethods(ObjectStore, '_store', IDBObjectStore, [\n  'deleteIndex'\n]);\n\nfunction Transaction(idbTransaction) {\n  this._tx = idbTransaction;\n  this.complete = new Promise(function(resolve, reject) {\n    idbTransaction.oncomplete = function() {\n      resolve();\n    };\n    idbTransaction.onerror = function() {\n      reject(idbTransaction.error);\n    };\n    idbTransaction.onabort = function() {\n      reject(idbTransaction.error);\n    };\n  });\n}\n\nTransaction.prototype.objectStore = function() {\n  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n};\n\nproxyProperties(Transaction, '_tx', [\n  'objectStoreNames',\n  'mode'\n]);\n\nproxyMethods(Transaction, '_tx', IDBTransaction, [\n  'abort'\n]);\n\nfunction UpgradeDB(db, oldVersion, transaction) {\n  this._db = db;\n  this.oldVersion = oldVersion;\n  this.transaction = new Transaction(transaction);\n}\n\nUpgradeDB.prototype.createObjectStore = function() {\n  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n};\n\nproxyProperties(UpgradeDB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(UpgradeDB, '_db', IDBDatabase, [\n  'deleteObjectStore',\n  'close'\n]);\n\nfunction DB(db) {\n  this._db = db;\n}\n\nDB.prototype.transaction = function() {\n  return new Transaction(this._db.transaction.apply(this._db, arguments));\n};\n\nproxyProperties(DB, '_db', [\n  'name',\n  'version',\n  'objectStoreNames'\n]);\n\nproxyMethods(DB, '_db', IDBDatabase, [\n  'close'\n]);\n\n// Add cursor iterators\n// TODO: remove this once browsers do the right thing with promises\n['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n  [ObjectStore, Index].forEach(function(Constructor) {\n    // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n    if (!(funcName in Constructor.prototype)) return;\n\n    Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n      var args = toArray(arguments);\n      var callback = args[args.length - 1];\n      var nativeObject = this._store || this._index;\n      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n      request.onsuccess = function() {\n        callback(request.result);\n      };\n    };\n  });\n});\n\n// polyfill getAll\n[Index, ObjectStore].forEach(function(Constructor) {\n  if (Constructor.prototype.getAll) return;\n  Constructor.prototype.getAll = function(query, count) {\n    var instance = this;\n    var items = [];\n\n    return new Promise(function(resolve) {\n      instance.iterateCursor(query, function(cursor) {\n        if (!cursor) {\n          resolve(items);\n          return;\n        }\n        items.push(cursor.value);\n\n        if (count !== undefined && items.length == count) {\n          resolve(items);\n          return;\n        }\n        cursor.continue();\n      });\n    });\n  };\n});\n\nexport function openDb(name, version, upgradeCallback) {\n  var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n  var request = p.request;\n\n  if (request) {\n    request.onupgradeneeded = function(event) {\n      if (upgradeCallback) {\n        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n      }\n    };\n  }\n\n  return p.then(function(db) {\n    return new DB(db);\n  });\n}\n\nexport function deleteDb(name) {\n  return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  CREATE_INSTALLATION_FAILED = 'create-installation-failed',\n  GENERATE_TOKEN_FAILED = 'generate-token-failed',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: 'Missing App configuration values.',\n  [ErrorCode.CREATE_INSTALLATION_FAILED]:\n    'Could not register Firebase Installation.',\n  [ErrorCode.GENERATE_TOKEN_FAILED]: 'Could not generate Auth Token.',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ServerErrorData;\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { AppConfig } from '../interfaces/app-config';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES);\n  }\n\n  const appName = app.name;\n  const { projectId, apiKey, appId } = app.options;\n\n  if (!appName || !projectId || !apiKey || !appId) {\n    throw ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES);\n  }\n\n  return { appName, projectId, apiKey, appId };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || ((self as unknown) as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, openDb } from 'idb';\nimport { AppConfig } from '../interfaces/app-config';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDB => {\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDB.oldVersion) {\n        case 0:\n          upgradeDB.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(appConfig: AppConfig): Promise<unknown> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(value, key);\n  await tx.complete;\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<OldType, NewType>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: OldType | undefined) => NewType\n): Promise<NewType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = await store.get(key);\n  const newValue = updateFn(oldValue);\n\n  if (newValue === oldValue) {\n    return newValue;\n  }\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n\n  await tx.complete;\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.complete;\n}\n\nfunction getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallation } from '../api/create-installation';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RequestStatus,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  appConfig: AppConfig\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(\n    appConfig,\n    (oldEntry?: InstallationEntry): InstallationEntry => {\n      const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n      const entryWithPromise = triggerRegistrationIfNecessary(\n        appConfig,\n        installationEntry\n      );\n      registrationPromise = entryWithPromise.registrationPromise;\n      return entryWithPromise.installationEntry;\n    }\n  );\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the registration\n * and return an InProgressInstallationEntry.\n */\nfunction triggerRegistrationIfNecessary(\n  appConfig: AppConfig,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      appConfig,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(appConfig)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  appConfig: AppConfig,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallation(\n      appConfig,\n      installationEntry\n    );\n    return set(appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending. */\nasync function waitUntilFidRegistration(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(appConfig);\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    throw ERROR_FACTORY.create(ErrorCode.CREATE_INSTALLATION_FAILED);\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(\n    appConfig,\n    (oldEntry?: InstallationEntry): InstallationEntry => {\n      if (!oldEntry) {\n        throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n      }\n\n      if (hasInstallationRequestTimedOut(oldEntry)) {\n        return {\n          fid: oldEntry.fid,\n          registrationStatus: RequestStatus.NOT_STARTED\n        };\n      }\n\n      return oldEntry;\n    }\n  );\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function createInstallation(\n  appConfig: AppConfig,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function generateAuthToken(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken = extractAuthTokenInfoFromResponse(\n      responseValue\n    );\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthToken } from '../api/generate-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(appConfig: AppConfig): Promise<string> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(\n    appConfig,\n    (oldEntry?: InstallationEntry): RegisteredInstallationEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n      if (isAuthTokenValid(oldAuthToken)) {\n        // There is a valid token in the DB.\n        return oldEntry;\n      } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n        // There already is a token request in progress.\n        tokenPromise = waitUntilAuthTokenRequest(appConfig);\n        return oldEntry;\n      } else {\n        // No token or token expired.\n        if (!navigator.onLine) {\n          throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n        }\n\n        const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n        tokenPromise = fetchAuthTokenFromServer(appConfig, inProgressEntry);\n        return inProgressEntry;\n      }\n    }\n  );\n\n  const authToken: CompletedAuthToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken.token;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n */\nasync function waitUntilAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    throw ERROR_FACTORY.create(ErrorCode.GENERATE_TOKEN_FAILED);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(\n    appConfig,\n    (oldEntry?: InstallationEntry): RegisteredInstallationEntry => {\n      if (!isEntryRegistered(oldEntry)) {\n        throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n      }\n\n      const oldAuthToken = oldEntry.authToken;\n      if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n        return {\n          ...oldEntry,\n          authToken: { requestStatus: RequestStatus.NOT_STARTED }\n        };\n      }\n\n      return oldEntry;\n    }\n  );\n}\n\nasync function fetchAuthTokenFromServer(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthToken(appConfig, installationEntry);\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (isServerError(e) && (e.serverCode === 401 || e.serverCode === 404)) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { AppConfig } from '../interfaces/app-config';\nimport { RequestStatus } from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  const appConfig = extractAppConfig(app);\n\n  await completeInstallationRegistration(appConfig);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  return refreshAuthToken(appConfig);\n}\n\nasync function completeInstallationRegistration(\n  appConfig: AppConfig\n): Promise<void> {\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    appConfig\n  );\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  } else if (installationEntry.registrationStatus !== RequestStatus.COMPLETED) {\n    // Installation ID can't be registered.\n    throw ERROR_FACTORY.create(ErrorCode.CREATE_INSTALLATION_FAILED);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport {\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallation(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> {\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = {\n    method: 'DELETE',\n    headers\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) {\n    throw await getErrorFromResponse('Delete Installation', response);\n  }\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport {\n  _FirebaseNamespace,\n  FirebaseServiceFactory\n} from '@firebase/app-types/private';\nimport { FirebaseInstallations } from '@firebase/installations-types';\n\nimport { deleteInstallation, getId, getToken } from './functions';\nimport { extractAppConfig } from './helpers/extract-app-config';\n\nexport function registerInstallations(instance: _FirebaseNamespace): void {\n  const installationsName = 'installations';\n\n  const factoryMethod: FirebaseServiceFactory = app => {\n    // Throws if app isn't configured properly.\n    extractAppConfig(app);\n\n    return {\n      app,\n      getId: () => getId(app),\n      getToken: () => getToken(app),\n      delete: () => deleteInstallation(app)\n    };\n  };\n\n  instance.INTERNAL.registerService(installationsName, factoryMethod);\n}\n\nregisterInstallations(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerInstallations`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    installations(app?: FirebaseApp): FirebaseInstallations;\n  }\n  interface FirebaseApp {\n    installations(): FirebaseInstallations;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { RequestStatus } from '../interfaces/installation-entry';\n\nexport async function getId(app: FirebaseApp): Promise<string> {\n  const appConfig = extractAppConfig(app);\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    appConfig\n  );\n\n  if (registrationPromise) {\n    // Suppress registration errors as they are not a problem for getId.\n    registrationPromise.catch(() => {});\n  }\n\n  if (installationEntry.registrationStatus === RequestStatus.COMPLETED) {\n    // If the installation is already registered, update the authentication\n    // token if needed. Suppress errors as they are not relevant to getId.\n    refreshAuthToken(appConfig).catch(() => {});\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { deleteInstallation as deleteInstallationRequest } from '../api/delete-installation';\nimport { extractAppConfig } from '../helpers/extract-app-config';\nimport { remove, update } from '../helpers/idb-manager';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport async function deleteInstallation(app: FirebaseApp): Promise<void> {\n  const appConfig = extractAppConfig(app);\n\n  const entry = await update(\n    appConfig,\n    (\n      oldEntry?: InstallationEntry\n    ):\n      | InProgressInstallationEntry\n      | RegisteredInstallationEntry\n      | undefined => {\n      if (\n        oldEntry &&\n        oldEntry.registrationStatus === RequestStatus.NOT_STARTED\n      ) {\n        // Delete the unregistered entry without sending a deleteInstallation request.\n        return undefined;\n      }\n      return oldEntry;\n    }\n  );\n\n  if (entry) {\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n    } else if (entry.registrationStatus === RequestStatus.COMPLETED) {\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      } else {\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by set methods.\n */\nexport class Api {\n  private performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private PerformanceObserver: typeof PerformanceObserver;\n  private windowLocation: Location;\n  onFirstInputDelay?: Function;\n  localStorage!: Storage;\n  document: Document;\n  navigator: Navigator;\n\n  constructor(window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (fetch && Promise && this.navigator && this.navigator.cookieEnabled) {\n      return true;\n    }\n    return false;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport '@firebase/installations';\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance()\n    .firebaseAppInstance.installations()\n    .getId();\n  // tslint:disable-next-line:no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance()\n    .firebaseAppInstance.installations()\n    .getToken();\n  // tslint:disable-next-line:no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2,\n  PRERENDER = 3,\n  UNLOADED = 4\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    case 'prerender':\n      return VisibilityState.PRERENDER;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const navigatorConnection = (navigator as any).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport {\n  SDK_VERSION,\n  CONFIG_LOCAL_STORAGE_KEY,\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY\n} from '../constants';\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logEndPointUrl?: string;\n  logSource?: number;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst SECONDARY_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(config => processConfig(config))\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */ () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  if (!config) {\n    return;\n  }\n  const localStorage = Api.getInstance().localStorage;\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: {\n          Authorization: `${FIS_AUTH_PREFIX} ${authToken}`\n        },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valie.\n */\nfunction processConfig(\n  config: RemoteConfigResponse | undefined\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (SECONDARY_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = SECONDARY_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (SECONDARY_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = SECONDARY_CONFIGS.logSource;\n  }\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (SECONDARY_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = SECONDARY_CONFIGS.logEndPointUrl;\n  }\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (SECONDARY_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      SECONDARY_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (SECONDARY_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      SECONDARY_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LogHandler, Logger, LogLevel } from '@firebase/logger';\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC accepted log format.\ninterface CcBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    // Capture a snapshot of the queue and empty the \"official queue\".\n    const staged = [...queue];\n    queue = [];\n\n    /* eslint-disable camelcase */\n    // We will pass the JSON serialized event to the backend.\n    const log_event = staged.map(evt => ({\n      source_extension_json: evt.message,\n      event_time_ms: String(evt.eventTime)\n    }));\n\n    const data: CcBatchLogFormat = {\n      request_time_ms: String(Date.now()),\n      client_info: {\n        client_type: 1, // 1 is JS\n        js_client_info: {}\n      },\n      log_source: SettingsService.getInstance().logSource,\n      log_event\n    };\n    /* eslint-enable camelcase */\n\n    fetch(SettingsService.getInstance().logEndPointUrl, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n      .then(res => {\n        if (!res.ok) {\n          consoleLogger.info('Call to Firebase backend failed.');\n        }\n        return res.json();\n      })\n      .then(res => {\n        const wait = Number(res.next_request_wait_millis);\n\n        // Find the next call wait time from the response.\n        const requestOffset = isNaN(wait)\n          ? DEFAULT_SEND_INTERVAL_MS\n          : Math.max(DEFAULT_SEND_INTERVAL_MS, wait);\n        remainingTries = DEFAULT_REMAINING_TRIES;\n        // Schedule the next process.\n        processQueue(requestOffset);\n      })\n      .catch(() => {\n        /**\n         * If the request fails for some reason, add the events that were attempted\n         * back to the primary queue to retry later.\n         */\n        queue = [...staged, ...queue];\n        remainingTries--;\n        consoleLogger.info(`Tries left: ${remainingTries}.`);\n        processQueue(DEFAULT_SEND_INTERVAL_MS);\n      });\n  }, timeOffset);\n}\n\nprocessQueue(INITIAL_SEND_TIME_DELAY_MS);\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function ccHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): LogHandler {\n  // The underscores for loggerInstance and level parameters are added to avoid the\n  // noUnusedParameters related error.\n  return (_loggerInstance: Logger, _level: LogLevel, ...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { Logger } from '@firebase/logger';\nimport { ccHandler } from './cc_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: Array<{ key: string; value: number }>;\n  custom_attributes?: Array<{ key: string; value: string }>;\n}\n/* eslint-enble camelcase */\n\nlet logger: Logger | undefined;\n// This method is not called before initialization.\nfunction getLogger(): Logger {\n  if (logger) {\n    return logger;\n  }\n  const ccLogger = ccHandler(serializer);\n  logger = new Logger('@firebase/performance/cc');\n  logger.logHandler = ccLogger;\n  return logger;\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (getIid()) {\n    setTimeout(() => getLogger().log(trace, ResourceType.Trace), 0);\n  }\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n  // Do not log the js sdk's call to cc service to avoid unnecessary cycle.\n  if (networkRequest.url === settingsService.logEndPointUrl.split('?')[0]) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(\n    () => getLogger().log(networkRequest, ResourceType.NetworkRequest),\n    0\n  );\n}\n\nfunction serializer(resource: {}, resourceType: ResourceType): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = convertToKeyValueArray(trace.counters);\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = convertToKeyValueArray(customAttributes);\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\nfunction convertToKeyValueArray<T>(obj: {\n  [key: string]: T;\n}): Array<{\n  key: string;\n  value: T;\n}> {\n  const keys = Object.keys(obj);\n  return keys.map(key => ({ key, value: obj[key] }));\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${\n        this.name\n      }`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${\n        this.name\n      }`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist.\n   * @param counter Name of the custom metric\n   * @param num Increment by value\n   */\n  incrementMetric(counter: string, num = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.counters[counter] = 0;\n    }\n    this.counters[counter] += num;\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist.\n   * @param counter Name of the custom metric\n   * @param num Set custom metric to this value\n   */\n  putMetric(counter: string, num: number): void {\n    this.counters[counter] = num;\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    this.customAttributes[attr] = value;\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.incrementMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.incrementMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.incrementMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.incrementMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.incrementMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.incrementMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      getInitializationPromise().then(setupOobResources, setupOobResources);\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport {\n  _FirebaseNamespace,\n  FirebaseServiceFactory\n} from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod: FirebaseServiceFactory = (\n    app: FirebaseApp\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    SettingsService.getInstance().firebaseAppInstance = app;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  const namespaceExports = {};\n  (instance as _FirebaseNamespace).INTERNAL.registerService(\n    'performance',\n    factoryMethod,\n    namespaceExports\n  );\n}\n\nsetupApi(window);\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"],"names":["deepExtend","target","source","Object","constructor","Date","getTime","undefined","Array","prop","hasOwnProperty","ERROR_NAME","FirebaseError","Error","[object Object]","code","message","super","this","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","customData","fullCode","template","replace","PATTERN","_","key","value","toString","replaceTemplate","fullMessage","error","keys","slice","console","warn","contains","obj","call","ERROR_FACTORY","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","invalid-app-argument","DEFAULT_ENTRY_NAME","FirebaseAppLiteImpl","options","config","firebase_","name_","name","automaticDataCollectionEnabled_","automaticDataCollectionEnabled","options_","checkDestroyed_","val","Promise","resolve","then","INTERNAL","removeApp","services","serviceKey","services_","instanceKey","push","all","filter","map","delete","isDeleted_","instanceIdentifier","instanceSpecifier","factories","extendApp","bind","props","appName","firebase","namespace","firebaseAppImpl","apps","appHooks","__esModule","initializeApp","rawConfig","String","app","callAppHooks","SDK_VERSION","version","registerService","createService","serviceProperties","appHook","allowMultipleInstances","serviceNamespace","appArg","getApps","forEach","args","_getService","apply","useAsService","eventName","factoryName","defineProperty","get","createFirebaseNamespaceCore","createFirebaseNamespaceLite","promisifyRequest","request","reject","onsuccess","result","onerror","promisifyRequestCall","method","p","proxyProperties","ProxyClass","targetProp","properties","set","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","arr","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","continue","PENDING_TIMEOUT_MS","PACKAGE_VERSION","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","missing-app-config-values","create-installation-failed","generate-token-failed","not-registered","installation-not-found","request-failed","app-offline","delete-pending-registration","isServerError","includes","extractAppConfig","projectId","apiKey","appId","getInstallationsEndpoint","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","now","async","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","Headers","Content-Type","Accept","x-goog-api-key","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","fid","array","btoa","fromCharCode","substr","encode","test","DATABASE_NAME","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeCallback","upgradeDB","indexedDB","onupgradeneeded","event","getKey","tx","put","remove","update","updateFn","oldValue","newValue","getInstallationEntry","registrationPromise","installationEntry","oldEntry","entry","registrationStatus","hasInstallationRequestTimedOut","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","registrationPromiseWithError","inProgressEntry","registrationTime","registeredInstallationEntry","endpoint","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallation","e","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","updateInstallationRequest","generateAuthToken","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","hasAuthTokenRequestTimedOut","getToken","completeInstallationRegistration","deleteInstallation","getDeleteEndpoint","LogLevel","getId","catch","deleteInstallationRequest","defaultLogLevel","INFO","defaultLogHandler","logType","logLevel","toISOString","DEBUG","VERBOSE","log","info","WARN","ERROR","Logger","_logLevel","TypeError","logHandler","_logHandler","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","trace started","trace stopped","no window","no app id","no project id","no api key","invalid cc log","FB not default","RC response not ok","apiInstance","windowInstance","settingsServiceInstance","iid","Api","window","performance","PerformanceObserver","windowLocation","location","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","href","split","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","entryType","list","getEntries","observe","entryTypes","SettingsService","firebaseAppInstance","getIid","VisibilityState","getServiceWorkerStatus","getInstance","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","PRERENDER","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","consoleLogger","REMOTE_CONFIG_SDK_VERSION","SECONDARY_CONFIGS","loggingEnabled","FIS_AUTH_PREFIX","getConfig","expiryString","getItem","expiry","configStringified","configResponse","parse","getStoredConfig","processConfig","authTokenPromise","installations","authTokenVal","getAuthTokenPromise","getProjectId","configEndPoint","getApiKey","Request","Authorization","app_instance_id","app_instance_id_token","app_id","getAppId","app_version","sdk_version","COULD_NOT_GET_CONFIG_MSG","getRemoteConfig","setItem","configTimeToLive","storeConfig","entries","fpr_enabled","fpr_log_source","logSource","fpr_log_endpoint_url","logEndPointUrl","fpr_vc_network_request_sampling_rate","networkRequestsSamplingRate","fpr_vc_trace_sampling_rate","tracesSamplingRate","logTraceAfterSampling","shouldLogAfterSampling","logNetworkAfterSampling","samplingRate","Math","random","initializationPromise","initializationStatus","getInitializationPromise","readyState","handler","removeEventListener","addEventListener","getDocumentReadyComplete","iidPromise","iidVal","getIidPromise","changeInitializationStatus","DEFAULT_SEND_INTERVAL_MS","DEFAULT_REMAINING_TRIES","logger","remainingTries","queue","ccHandler","serializer","_loggerInstance","_level","evt","eventTime","addToQueue","getLogger","ccLogger","logTrace","trace","settingsService","instrumentationEnabled","isAuto","dataCollectionEnabled","requiredApisAvailable","sendTraceLog","resource","resourceType","networkRequest","networkRequestMetric","url","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","counters","convertToKeyValueArray","customAttributes","getAttributes","custom_attributes","trace_metric","serializeTrace","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","processQueue","timeOffset","staged","log_event","source_extension_json","event_time_ms","request_time_ms","client_info","client_type","js_client_info","log_source","res","wait","next_request_wait_millis","requestOffset","isNaN","max","Trace","traceMeasureName","floor","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","state","traceName","api","startTime","duration","attributes","metrics","metric","counter","num","attr","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","incrementMetric","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","find","paintObject","firstContentfulPaint","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","logNetworkRequest","transferSize","FID_WAIT_TIME_MS","setupOobResources","timeoutId","createOobTrace","clearTimeout","setupOobTraces","resources","setupObserver","setupNetworkRequests","measures","createUserTimingTrace","setupUserTimingTraces","substring","PerformanceController","setupApi","registerPerformance"],"mappings":"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"}
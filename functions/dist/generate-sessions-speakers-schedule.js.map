{"version":3,"sources":["../src/generate-sessions-speakers-schedule.js"],"names":["sessionsWrite","functions","firestore","document","onWrite","generateAndSaveData","scheduleWrite","scheduleConfig","config","schedule","enabled","console","error","speakersWrite","change","context","changedSpeaker","after","exists","id","params","speakerId","data","sessionsPromise","collection","get","schedulePromise","orderBy","speakersPromise","sessionsSnapshot","scheduleSnapshot","speakersSnapshot","Promise","all","sessions","speakers","forEach","doc","generatedData","scheduleEnabled","Object","keys","length","saveGeneratedData","collectionName","index","key","set"],"mappings":"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","sourcesContent":["import * as functions from 'firebase-functions';\nimport { firestore } from 'firebase-admin';\nimport mapSessionsSpeakersSchedule from './schedule-generator/speakers-sessions-schedule-map';\nimport mapSessionsSpeakers from './schedule-generator/speakers-sessions-map';\n\nexport const sessionsWrite = functions.firestore.document('sessions/{sessionId}').onWrite(async () => {\n  return generateAndSaveData();\n});\n\nexport const scheduleWrite = functions.firestore.document('schedule/{scheduleId}').onWrite(async () => {\n  const scheduleConfig = functions.config().schedule;\n  if (!scheduleConfig || typeof scheduleConfig.enabled === 'undefined') {\n    console.error('Schedule config is NOT set! Run `firebase functions:config:set schedule.enabled=true`, redeploy functions and try again.');\n    return null;\n  }\n  if(scheduleConfig.enabled === 'true') {\n    return generateAndSaveData();\n  }\n  return null;\n});\n\nexport const speakersWrite = functions.firestore.document('speakers/{speakerId}').onWrite(async (change, context) => {\n  const changedSpeaker = change.after.exists ? { id: context.params.speakerId, ...change.after.data() } : null;\n  return generateAndSaveData(changedSpeaker);\n});\n\nasync function generateAndSaveData(changedSpeaker) {\n  const sessionsPromise = firestore().collection('sessions').get();\n  const schedulePromise = firestore().collection('schedule').orderBy('date', 'desc').get();\n  const speakersPromise = firestore().collection('speakers').get();\n\n  const [sessionsSnapshot, scheduleSnapshot, speakersSnapshot] = await Promise.all([sessionsPromise, schedulePromise, speakersPromise]);\n\n  const sessions = {};\n  const schedule = {};\n  const speakers = {};\n\n  sessionsSnapshot.forEach((doc) => {\n    sessions[doc.id] = doc.data();\n  });\n\n  scheduleSnapshot.forEach((doc) => {\n    schedule[doc.id] = doc.data();\n  });\n\n  speakersSnapshot.forEach((doc) => {\n    speakers[doc.id] = doc.data();\n  });\n\n  let generatedData = {};\n  const scheduleConfig = functions.config().schedule;\n  if (!scheduleConfig || typeof scheduleConfig.enabled === 'undefined') {\n    console.error('Schedule config is NOT set! Run `firebase functions:config:set schedule.enabled=true`, redeploy functions and try again.');\n    return null;\n  }\n  const scheduleEnabled = scheduleConfig.enabled === 'true';\n\n  if (!Object.keys(sessions).length) {\n    generatedData = { ...speakers };\n  } else if (!scheduleEnabled || !Object.keys(schedule).length) {\n    generatedData = mapSessionsSpeakers(sessions, speakers);\n  } else {\n    generatedData = mapSessionsSpeakersSchedule(sessions, speakers, schedule);\n  }\n\n  // If changed speaker does not have assigned session(s) yet\n  if (changedSpeaker && !generatedData.speakers[changedSpeaker.id]) {\n    generatedData.speakers[changedSpeaker.id] = changedSpeaker;\n  }\n\n  saveGeneratedData(generatedData.sessions, 'generatedSessions');\n  saveGeneratedData(generatedData.speakers, 'generatedSpeakers');\n  saveGeneratedData(generatedData.schedule, 'generatedSchedule');\n}\n\nfunction saveGeneratedData(data, collectionName) {\n  if (!data || !Object.keys(data).length) return;\n\n  for (let index = 0; index < Object.keys(data).length; index++) {\n    const key = Object.keys(data)[index];\n    firestore().collection(collectionName)\n      .doc(key)\n      .set(data[key]);\n  }\n}\n"],"file":"generate-sessions-speakers-schedule.js"}
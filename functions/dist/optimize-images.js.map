{"version":3,"sources":["../src/optimize-images.js"],"names":["gcs","Storage","optimizeImages","storage","object","onFinalize","contentType","startsWith","console","log","optimizeImage","filePath","name","tempLocalFile","path","join","os","tmpdir","tempLocalDir","dirname","bucket","file","metadata","getMetadata","optimized","download","destination","newFile","upload","makePublic","Promise","all","fs","unlinkSync"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,GAAG,GAAG,IAAIC,gBAAJ,EAAZ;;AAEA,MAAMC,cAAc,GAAGC,2BAAQC,MAAR,GAAiBC,UAAjB,CAA6BD,MAAD,IAAY;AAC7D,QAAM;AAAEE,IAAAA;AAAF,MAAkBF,MAAxB,CAD6D,CAE7D;;AACA,MAAI,CAACE,WAAW,CAACC,UAAZ,CAAuB,QAAvB,CAAL,EAAuC;AACrCC,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,WAAO,IAAP;AACD;;AAED,SAAOC,aAAa,CAACN,MAAD,CAApB;AACD,CATsB,CAAvB;;AAWA,eAAeM,aAAf,CAA6BN,MAA7B,EAAqC;AACnC;AACA,QAAMO,QAAQ,GAAGP,MAAM,CAACQ,IAAxB;;AACA,QAAMC,aAAa,GAAGC,cAAKC,IAAL,CAAUC,YAAGC,MAAH,EAAV,EAAuBN,QAAvB,CAAtB;;AACA,QAAMO,YAAY,GAAGJ,cAAKK,OAAL,CAAaN,aAAb,CAArB,CAJmC,CAMnC;;;AACA,QAAMO,MAAM,GAAGpB,GAAG,CAACoB,MAAJ,CAAWhB,MAAM,CAACgB,MAAlB,CAAf;AACA,QAAMC,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYV,QAAZ,CAAb;AAEA,QAAM,CAACW,QAAD,IAAa,MAAMD,IAAI,CAACE,WAAL,EAAzB;;AACA,MAAID,QAAQ,CAACA,QAAT,IAAqBA,QAAQ,CAACA,QAAT,CAAkBE,SAA3C,EAAsD;AACpDhB,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACA,WAAO,IAAP;AACD;;AAED,QAAM,4BAAOS,YAAP,CAAN;AACA,QAAMG,IAAI,CAACI,QAAL,CAAc;AAAEC,IAAAA,WAAW,EAAEb;AAAf,GAAd,CAAN;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA+CI,aAA/C,EAlBmC,CAoBnC;;AACA,QAAM,gCAAM,SAAN,EAAiB,CAACA,aAAD,EAAgB,QAAhB,EAA0B,YAA1B,EAAwC,OAAxC,EAAiD,UAAjD,EAA6D,IAA7D,EAAmEA,aAAnE,CAAjB,CAAN;AACAL,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CI,aAA1C,EAtBmC,CAwBnC;;AACA,QAAMa,WAAW,GAAGN,MAAM,CAACC,IAAP,CAAYV,QAAZ,CAApB;AACA,QAAM,CAACgB,OAAD,IAAY,MAAMP,MAAM,CAACQ,MAAP,CAAcf,aAAd,EAA6B;AACnDa,IAAAA,WADmD;AAEnDJ,IAAAA,QAAQ,EAAE;AACRA,MAAAA,QAAQ,EAAE;AACRE,QAAAA,SAAS,EAAE;AADH;AADF;AAFyC,GAA7B,CAAxB;AAQA,QAAMG,OAAO,CAACE,UAAR,EAAN;AACArB,EAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAnCmC,CAoCnC;;AACA,SAAOqB,OAAO,CAACC,GAAR,CAAY,CAACC,YAAGC,UAAH,CAAcpB,aAAd,CAAD,CAAZ,CAAP;AACD;;eAEcX,c","sourcesContent":["import { storage } from 'firebase-functions';\nimport Storage from '@google-cloud/storage';\nimport { spawn } from 'child-process-promise';\nimport mkdirp from 'mkdirp-promise';\nimport path from 'path';\nimport os from 'os';\nimport fs from 'fs';\n\nconst gcs = new Storage();\n\nconst optimizeImages = storage.object().onFinalize((object) => {\n  const { contentType } = object;\n  // Exit if this is triggered on a file that is not an image.\n  if (!contentType.startsWith('image/')) {\n    console.log('This is not an image.');\n    return null;\n  }\n\n  return optimizeImage(object);\n});\n\nasync function optimizeImage(object) {\n  // File and directory paths.\n  const filePath = object.name;\n  const tempLocalFile = path.join(os.tmpdir(), filePath);\n  const tempLocalDir = path.dirname(tempLocalFile);\n\n  // Cloud Storage files.\n  const bucket = gcs.bucket(object.bucket);\n  const file = bucket.file(filePath);\n\n  const [metadata] = await file.getMetadata();\n  if (metadata.metadata && metadata.metadata.optimized) {\n    console.log('Image has been already optimized');\n    return null;\n  }\n\n  await mkdirp(tempLocalDir);\n  await file.download({ destination: tempLocalFile });\n  console.log('The file has been downloaded to', tempLocalFile);\n\n  // Generate a thumbnail using ImageMagick.\n  await spawn('convert', [tempLocalFile, '-strip', '-interlace', 'Plane', '-quality', '82', tempLocalFile]);\n  console.log('Optimized image created at', tempLocalFile);\n\n  // Uploading the Optimized image.\n  const destination = bucket.file(filePath);\n  const [newFile] = await bucket.upload(tempLocalFile, {\n    destination,\n    metadata: {\n      metadata: {\n        optimized: true,\n      },\n    },\n  });\n  await newFile.makePublic();\n  console.log('Optimized image uploaded to Storage');\n  // Once the image has been uploaded delete the local files to free up disk space.\n  return Promise.all([fs.unlinkSync(tempLocalFile)]);\n}\n\nexport default optimizeImages;\n"],"file":"optimize-images.js"}
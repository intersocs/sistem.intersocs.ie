{"version":3,"sources":["../src/prerender.js"],"names":["app","generateUrl","request","url","format","protocol","host","functions","config","site","domain","pathname","originalUrl","checkForBots","userAgent","botList","toLowerCase","search","get","req","res","botResult","headers","targetUrl","rendertron","server","then","text","body","set","send","toString","sendFile","path","join","__dirname","prerender","https","onRequest"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,MAAMA,GAAG,GAAG,uBAAZ;AAEA;;;;;AAIA,MAAMC,WAAW,GAAIC,OAAD,IAAa;AAC/B;AACA;AACA;AACA,SAAOC,aAAIC,MAAJ,CAAW;AAChBC,IAAAA,QAAQ,EAAEH,OAAO,CAACG,QADF;AAEhBC,IAAAA,IAAI,EAAEC,SAAS,CAACC,MAAV,GAAmBC,IAAnB,CAAwBC,MAFd;AAGhBC,IAAAA,QAAQ,EAAET,OAAO,CAACU;AAHF,GAAX,CAAP;AAKD,CATD;AAWA;;;;;;AAIA,MAAMC,YAAY,GAAIC,SAAD,IAAe;AAClC;AACA;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAG,yNAAyNC,WAAzN,EAAhB,CANkC,CAQlC;;AACA,SAAOF,SAAS,CAACE,WAAV,GAAwBC,MAAxB,CAA+BF,OAA/B,MAA4C,CAAC,CAApD;AACD,CAVD,C,CAYA;AACA;AACA;AACA;;;AACAf,GAAG,CAACkB,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB;AACA,QAAMC,SAAS,GAAGR,YAAY,CAACM,GAAG,CAACG,OAAJ,CAAY,YAAZ,CAAD,CAA9B;;AACA,MAAID,SAAJ,EAAe;AACb;AACA,UAAME,SAAS,GAAGtB,WAAW,CAACkB,GAAD,CAA7B,CAFa,CAIb;AACA;;AACA,4BAAO,GAAEZ,SAAS,CAACC,MAAV,GAAmBgB,UAAnB,CAA8BC,MAAO,WAAUF,SAAU,EAAlE,EACGG,IADH,CACSN,GAAD,IAASA,GAAG,CAACO,IAAJ,EADjB,EAEGD,IAFH,CAESE,IAAD,IAAU;AACd;AACA;AACA;AACA;AACA;AACAR,MAAAA,GAAG,CAACS,GAAJ,CAAQ,eAAR,EAAyB,mCAAzB;AACAT,MAAAA,GAAG,CAACS,GAAJ,CAAQ,MAAR,EAAgB,YAAhB;AAEAT,MAAAA,GAAG,CAACU,IAAJ,CAASF,IAAI,CAACG,QAAL,EAAT;AACD,KAZH;AAaD,GAnBD,MAmBO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACAX,IAAAA,GAAG,CAACY,QAAJ,CAAaC,cAAKC,IAAL,CAAUC,SAAS,GAAG,aAAtB,CAAb;AACD;AACF,CAhCD;AAkCA,MAAMC,SAAS,GAAG7B,SAAS,CAAC8B,KAAV,CAAgBC,SAAhB,CAA0BtC,GAA1B,CAAlB;eAEeoC,S","sourcesContent":["import * as functions from 'firebase-functions';\nimport express from 'express';\nimport fetch from 'node-fetch';\nimport url from 'url';\nimport path from 'path';\n\nconst app = express();\n\n/**\n * generateUrl() - Piece together request parts to form FQDN URL\n * @param {Object} request\n */\nconst generateUrl = (request) => {\n  // Why do we use functions.config().site.domain instead of the domain from\n  // the request? Because it'll give you the wrong domain (pointed at the\n  // cloudfunctions.net)\n  return url.format({\n    protocol: request.protocol,\n    host: functions.config().site.domain,\n    pathname: request.originalUrl,\n  });\n};\n\n/**\n * checkForBots() - regex that UserAgent, find me a linkbot\n * @param {String} userAgent\n */\nconst checkForBots = (userAgent) => {\n  // These are link bots only!\n  // DO NOT ADD GOOGLEBOT.\n  // If you add Googlebot to this, you will not have a good day.\n  // This is a mix of Sam Li's list (https://github.com/webcomponents/webcomponents.org/blob/696eb6d6f1fe955db395e96d97c3d1dfe0a02b26/client/bot-filter.py#L9)\n  // and my list (https://github.com/justinribeiro/blog-pwa/blob/a7174657f3e910cacf2f089c012d40bec719293e/appengine/main.py#L28)\n  const botList = 'baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\\ link\\ preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator|slackbot|facebot|developers\\.google\\.com\\/\\+\\/web\\/snippet\\/'.toLowerCase();\n\n  // FIND THE BOT AMONG THE USSSERRRS\n  return userAgent.toLowerCase().search(botList) !== -1;\n};\n\n// This WILL NOT run for index.html because Exact-match static content is before\n// configured rewrites (see \"Hosting Priorities\" https://firebase.google.com/docs/hosting/url-redirects-rewrites)\n//\n// The trick is on L66, pwaShell(): You must update that file! Open for explainer.\napp.get('*', (req, res) => {\n  // What say you bot tester?\n  const botResult = checkForBots(req.headers['user-agent']);\n  if (botResult) {\n    // Get me the url all nice\n    const targetUrl = generateUrl(req);\n\n    // Did you read the README? You should have set functions.config().rendertron.server\n    // to where ever you deployed https://github.com/GoogleChrome/rendertron on AppEngine\n    fetch(`${functions.config().rendertron.server}/render/${targetUrl}`)\n      .then((res) => res.text())\n      .then((body) => {\n        // We set Vary because we only want to cache this result for the bots\n        // which we know based on the user-agent. Vary is very useful.\n        // Reading about Vary header:\n        //  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary\n        //  https://www.fastly.com/blog/best-practices-using-vary-header/\n        res.set('Cache-Control', 'public, max-age=300, s-maxage=600');\n        res.set('Vary', 'User-Agent');\n\n        res.send(body.toString());\n      });\n  } else {\n    // 1. Umm, Justin, why not just point to index.html?\n    // 2. Umm, Justin, why not just fetch() index.html from the domain?\n    //\n    // Valid things to ask internet peoples\n    // 1. function doesn't know about the public hosting as far as I can tell (docs don't offer opinion/example)\n    // 2. Could fetch and return...but I found copy+paste the index.html PWA shell into file returns faster\n    // const indexHTML = fs.readFileSync('./index.html').toString();\n    res.sendFile(path.join(__dirname + '/index.html'));\n  }\n});\n\nconst prerender = functions.https.onRequest(app);\n\nexport default prerender;\n"],"file":"prerender.js"}
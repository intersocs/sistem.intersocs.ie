{"version":3,"sources":["../src/notifications.js"],"names":["sendGeneralNotification","functions","firestore","document","onCreate","snapshot","context","timestamp","params","message","data","console","log","deviceTokensPromise","collection","get","notificationsConfigPromise","doc","tokensSnapshot","notificationsConfigSnapshot","Promise","all","notificationsConfig","exists","tokens","docs","map","id","length","payload","Object","assign","icon","tokensToRemove","messagingResponse","sendToDevice","results","forEach","result","index","error","code","push","ref","child","remove"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,uBAAuB,GAAGC,SAAS,CAACC,SAAV,CAAoBC,QAApB,CAA6B,4BAA7B,EAC7BC,QAD6B,CACpB,OAAOC,QAAP,EAAiBC,OAAjB,KAA6B;AACrC,QAAMC,SAAS,GAAGD,OAAO,CAACE,MAAR,CAAeD,SAAjC;AACA,QAAME,OAAO,GAAGJ,QAAQ,CAACK,IAAT,EAAhB;AAEA,MAAI,CAACD,OAAL,EAAc,OAAO,IAAP;AACdE,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCL,SAArC,EAAgD,gBAAhD,EAAkEE,OAAlE;AACA,QAAMI,mBAAmB,GAAG,gCAAYC,UAAZ,CAAuB,0BAAvB,EAAmDC,GAAnD,EAA5B;AACA,QAAMC,0BAA0B,GAAG,gCAAYF,UAAZ,CAAuB,QAAvB,EAAiCG,GAAjC,CAAqC,eAArC,EAAsDF,GAAtD,EAAnC;AAEA,QAAM,CAACG,cAAD,EAAiBC,2BAAjB,IAAgD,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACR,mBAAD,EAAsBG,0BAAtB,CAAZ,CAA5D;AACA,QAAMM,mBAAmB,GAAGH,2BAA2B,CAACI,MAA5B,GAAqCJ,2BAA2B,CAACT,IAA5B,EAArC,GAA0E,EAAtG;AAEA,QAAMc,MAAM,GAAGN,cAAc,CAACO,IAAf,CAAoBC,GAApB,CAAwBT,GAAG,IAAIA,GAAG,CAACU,EAAnC,CAAf;;AAEA,MAAI,CAACH,MAAM,CAACI,MAAZ,EAAoB;AAClBjB,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACA,WAAO,IAAP;AACD;;AACDD,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBY,MAAM,CAACI,MAAhC,EAAwC,kCAAxC;AAEA,QAAMC,OAAO,GAAG;AACdnB,IAAAA,IAAI,EAAEoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBtB,OAAlB,EAA2B;AAC/BuB,MAAAA,IAAI,EAAEvB,OAAO,CAACuB,IAAR,IAAgBV,mBAAmB,CAACU;AADX,KAA3B;AADQ,GAAhB;AAMA,QAAMC,cAAc,GAAG,EAAvB;AACA,QAAMC,iBAAiB,GAAG,MAAM,gCAAYC,YAAZ,CAAyBX,MAAzB,EAAiCK,OAAjC,CAAhC;AACAK,EAAAA,iBAAiB,CAACE,OAAlB,CAA0BC,OAA1B,CAAkC,CAACC,MAAD,EAASC,KAAT,KAAmB;AACnD,UAAMC,KAAK,GAAGF,MAAM,CAACE,KAArB;;AACA,QAAIA,KAAJ,EAAW;AACT7B,MAAAA,OAAO,CAAC6B,KAAR,CAAc,iCAAd,EAAiDhB,MAAM,CAACe,KAAD,CAAvD,EAAgEC,KAAhE;;AACA,UAAIA,KAAK,CAACC,IAAN,KAAe,sCAAf,IACFD,KAAK,CAACC,IAAN,KAAe,6CADjB,EACgE;AAC9DR,QAAAA,cAAc,CAACS,IAAf,CAAoBxB,cAAc,CAACyB,GAAf,CAAmBC,KAAnB,CAAyBpB,MAAM,CAACe,KAAD,CAA/B,EAAwCM,MAAxC,EAApB;AACD;AACF;AACF,GATD;AAUA,SAAOzB,OAAO,CAACC,GAAR,CAAYY,cAAZ,CAAP;AACD,CAxC6B,CAAhC;eA0CejC,uB","sourcesContent":["import * as functions from 'firebase-functions';\nimport { firestore, messaging } from 'firebase-admin';\n\nconst sendGeneralNotification = functions.firestore.document('/notifications/{timestamp}')\n  .onCreate(async (snapshot, context) => {\n    const timestamp = context.params.timestamp;\n    const message = snapshot.data();\n\n    if (!message) return null;\n    console.log('New message added at ', timestamp, ' with payload ', message);\n    const deviceTokensPromise = firestore().collection('notificationsSubscribers').get();\n    const notificationsConfigPromise = firestore().collection('config').doc('notifications').get();\n\n    const [tokensSnapshot, notificationsConfigSnapshot] = await Promise.all([deviceTokensPromise, notificationsConfigPromise]);\n    const notificationsConfig = notificationsConfigSnapshot.exists ? notificationsConfigSnapshot.data() : {};\n\n    const tokens = tokensSnapshot.docs.map(doc => doc.id);\n\n    if (!tokens.length) {\n      console.log('There are no notification tokens to send to.');\n      return null;\n    }\n    console.log('There are', tokens.length, 'tokens to send notifications to.');\n\n    const payload = {\n      data: Object.assign({}, message, {\n        icon: message.icon || notificationsConfig.icon\n      })\n    };\n\n    const tokensToRemove = [];\n    const messagingResponse = await messaging().sendToDevice(tokens, payload);\n    messagingResponse.results.forEach((result, index) => {\n      const error = result.error;\n      if (error) {\n        console.error('Failure sending notification to', tokens[index], error);\n        if (error.code === 'messaging/invalid-registration-token' ||\n          error.code === 'messaging/registration-token-not-registered') {\n          tokensToRemove.push(tokensSnapshot.ref.child(tokens[index]).remove());\n        }\n      }\n    });\n    return Promise.all(tokensToRemove);\n  });\n\nexport default sendGeneralNotification;\n"],"file":"notifications.js"}